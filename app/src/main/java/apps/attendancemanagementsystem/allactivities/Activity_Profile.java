package apps.attendancemanagementsystem.allactivities;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.ActivityNotFoundException;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.net.Uri;import android.os.Bundle;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.Toast;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NetworkResponse;import com.android.volley.NoConnectionError;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.RetryPolicy;import com.android.volley.TimeoutError;import com.android.volley.VolleyLog;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.google.android.material.textfield.TextInputEditText;import com.google.android.material.textfield.TextInputLayout;import com.google.android.material.textview.MaterialTextView;import org.json.JSONArray;import org.json.JSONObject;import java.io.UnsupportedEncodingException;import java.util.HashMap;import java.util.Map;import java.util.Objects;import apps.attendancemanagementsystem.BuildConfig;import apps.attendancemanagementsystem.R;import apps.attendancemanagementsystem.utils.AppSession;import apps.attendancemanagementsystem.utils.Cons;import apps.attendancemanagementsystem.utils.Utilities;import apps.attendancemanagementsystem.utils.Utils;public class Activity_Profile extends AppCompatActivity implements View.OnClickListener {    private Utilities utilities;    private AppSession appSession;    private LinearLayout edit_profile_ll, lyr_change_password, lyr_rate, lyr_share;    private TextInputLayout til_name, til_email, til_mobile;    private TextInputEditText et_name, et_mail, et_mobile;    private ImageView iv_bck;    private MaterialTextView btn_submit;    private Context context;    private String userName = "", mail = "", mobile = "";    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_profile);        this.context = this;        this.utilities = Utilities.getInstance(this);        this.appSession = new AppSession(this);        edit_profile_ll = findViewById(R.id.edit_profile_ll);        iv_bck = findViewById(R.id.iv_bck);        til_name = findViewById(R.id.til_name);        til_email = findViewById(R.id.til_email);        til_mobile = findViewById(R.id.til_mobile);        et_name = findViewById(R.id.et_name);        et_mail = findViewById(R.id.et_mail);        et_mobile = findViewById(R.id.et_mobile);        lyr_change_password = findViewById(R.id.lyr_change_password);        lyr_rate = findViewById(R.id.lyr_rate);        lyr_share = findViewById(R.id.lyr_share);        btn_submit = findViewById(R.id.btn_submit);        edit_profile_ll.setOnClickListener(this);        iv_bck.setOnClickListener(this);        btn_submit.setOnClickListener(this);        lyr_change_password.setOnClickListener(this);        lyr_rate.setOnClickListener(this);        lyr_share.setOnClickListener(this);        if (Utils.checkNetworkConnection(context)) {            getProfile();        } else {            AlertDialog.Builder builder = new AlertDialog.Builder(Activity_Profile.this);            builder.setMessage("No internet connection found");            builder.setPositiveButton("OK", (dialog, which) -> dialog.dismiss());            builder.create();            builder.show();            //Toast.makeText(getApplicationContext(), "No internet connection found", Toast.LENGTH_LONG).show();        }    }    @Override    public void onClick(View view) {        if (view.getId() == R.id.iv_bck) {            Intent intent = new Intent(getApplicationContext(), Activity_MainDashboard.class);            startActivity(intent);        }        if (view.getId() == R.id.edit_profile_ll) {            et_name.setEnabled(true);            et_mail.setEnabled(true);            et_mobile.setEnabled(true);            btn_submit.setVisibility(View.VISIBLE);            btn_submit.setEnabled(true);            btn_submit.setFocusable(true);            btn_submit.setClickable(true);        }        if (view.getId() == R.id.lyr_change_password) {            Intent changepassword = new Intent(getApplicationContext(), Activity_ChangePassword.class);            startActivity(changepassword);        }        if (view.getId() == R.id.btn_submit) {            if (isValid()) {                if (Utilities.getInstance(this).isNetworkAvailable()) {                    UpdateProfile();                } else {                    AlertDialog.Builder builder = new AlertDialog.Builder(Activity_Profile.this);                    builder.setMessage("No internet connection found");                    builder.setPositiveButton("OK", (dialog, which) -> dialog.dismiss());                    builder.create();                    builder.show();                    //Toast.makeText(getApplicationContext(), "No internet connection found", Toast.LENGTH_SHORT).show();                }            }        }        if (view.getId() == R.id.lyr_rate) {            rate_app();        }        if (view.getId() == R.id.lyr_share) {            share();        }    }    private boolean isValid() {        boolean isValid = true;        userName = Objects.requireNonNull(et_name.getText()).toString().trim();        mail = Objects.requireNonNull(et_mail.getText()).toString().trim();        mobile = Objects.requireNonNull(et_mobile.getText()).toString().trim();        if (TextUtils.isEmpty(userName)) {            til_name.setError("Can't Empty");            isValid = false;        } else {            til_name.setError(null);        }        if (TextUtils.isEmpty(mail)) {            til_email.setError("Can't Empty");            isValid = false;        } else {            til_email.setError(null);        }        if (TextUtils.isEmpty(mobile)) {            til_mobile.setError("Can't Empty");            isValid = false;        } else {            til_mobile.setError(null);        }        return isValid;    }    private void share() {        try {            Intent shareIntent = new Intent(Intent.ACTION_SEND);            shareIntent.setType("text/plain");            shareIntent.putExtra(Intent.EXTRA_SUBJECT, "Attendance Management System Mobile App");            String shareMessage = "\nLet me recommend you this application for Attendance Management System Mobile App.\n\n";            shareMessage = shareMessage + "https://play.google.com/store/apps/details?id=" + BuildConfig.APPLICATION_ID + "\n\n";            shareIntent.putExtra(Intent.EXTRA_TEXT, shareMessage);            startActivity(Intent.createChooser(shareIntent, "choose one"));        } catch (Exception e) {            e.printStackTrace();            //e.toString();        }    }    private void rate_app() {        Uri uri = Uri.parse("market://details?id=" + getApplicationContext().getPackageName());        Intent goToMarket = new Intent(Intent.ACTION_VIEW, uri);        // To count with Play market backstack, After pressing back button,        // to taken back to our application, we need to add following flags to intent.        goToMarket.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY |                Intent.FLAG_ACTIVITY_NEW_DOCUMENT |                Intent.FLAG_ACTIVITY_MULTIPLE_TASK);        try {            startActivity(goToMarket);        } catch (ActivityNotFoundException e) {            startActivity(new Intent(Intent.ACTION_VIEW,                    Uri.parse("http://play.google.com/store/apps/details?id=" + getApplicationContext().getPackageName())));        }    }    private void getProfile() {        String url = Cons.serverUrl + "api/android/App_GetUserDetails";        Log.e("SAVED Url >>>>>> ", url);        final ProgressDialog pDialog = ProgressDialog.show(Activity_Profile.this, null, null);        pDialog.setContentView(R.layout.progress_loader);        Objects.requireNonNull(pDialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        pDialog.setCancelable(false);        pDialog.show();        JSONObject mainJson = new JSONObject();        try {            mainJson.put("EmployeeId", appSession.getEmployeeUserId());            Log.e("EmployeeId", "EmployeeUserId" + mainJson.toString().trim());        } catch (Exception e) {            e.printStackTrace();        }        final String requestBody = mainJson.toString();        StringRequest getRequest = new StringRequest(Request.Method.POST, url,                response -> {                    Log.e("response", ">>result>>>>>" + response.toString());                    pDialog.dismiss();                    try {                        JSONArray jsonArray = new JSONArray(response);                        JSONObject jsonObject = jsonArray.getJSONObject(0);//                        String resultStatus = jsonObject.getString("ResultStatus");                        //UserName,Email,Mobile,DOB,Gender//                        if (resultStatus.equalsIgnoreCase("t")) {                        userName = jsonObject.getString("UserName");                        mail = jsonObject.getString("Email");                        mobile = jsonObject.getString("Mobile");                        et_name.setText(userName);                        et_mail.setText(mail);                        et_mobile.setText(mobile);//                        } else {//                            Toast.makeText(this, "No data found", Toast.LENGTH_SHORT).show();//                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                },                error -> {//                    pDialog.dismiss();                    NetworkResponse networkResponse = error.networkResponse;                    String errorMessage = "Unknown error";                    if (networkResponse == null) {                        if (error.getClass().equals(TimeoutError.class)) {                            errorMessage = "Request timeout";                            //callTask(1);                        } else if (error.getClass().equals(NoConnectionError.class)) {                            errorMessage = "Failed to connect server";                            utilities.dialogOK(context, getResources().getString(R.string.app_name), errorMessage, "OK", false);                        }                    } else {                        String result = new String(networkResponse.data);                        try {                            if (networkResponse.statusCode == 404) {                                errorMessage = "Resource not found";                            } else if (networkResponse.statusCode == 401) {                                errorMessage = " Please login again";                            } else if (networkResponse.statusCode == 400) {                                errorMessage = " Check your inputs";                                //showFailedDialog();                            } else if (networkResponse.statusCode == 500) {                                errorMessage = " Something is getting wrong";                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                    if (errorMessage.equalsIgnoreCase(" Please login again")) {                        //showExceptionDialogLogin(errorMessage);                    } else {                        //showExceptionDialog(errorMessage);                    }                    Log.e("Error", errorMessage);                    error.printStackTrace();                }        ) {            @Override            public String getBodyContentType() {                return "application/json";            }            @Override            public byte[] getBody() {                try {                    return requestBody == null ? null : requestBody.getBytes("utf-8");                } catch (UnsupportedEncodingException uee) {                    VolleyLog.wtf("Unsupported Encoding while trying to get the bytes of %s using %s", requestBody, "utf-8");                    return null;                }            }            @Override            public Map<String, String> getHeaders() {                Map<String, String> params = new HashMap<String, String>();                params.put("Authorization", "bearer " + appSession.getAccessToken());                Log.e("accesstypetoken", "access_type_token" + " " + "bearer " + appSession.getAccessToken());                return params;            }        };        int socketTimeout = 30 * 1000; // 30 seconds. You can change it        RetryPolicy policy = new DefaultRetryPolicy(socketTimeout,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);        getRequest.setRetryPolicy(policy);        RequestQueue queue = Volley.newRequestQueue(this);        queue.add(getRequest);    }    //for posting the attendance    private void UpdateProfile() {        String url = Cons.serverUrl + "api/android/App_UpdateProfile";        Log.e("SAVED Url >>>>>> ", url);        final ProgressDialog pDialog = ProgressDialog.show(Activity_Profile.this, null, null);        pDialog.setContentView(R.layout.progress_loader);        Objects.requireNonNull(pDialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        pDialog.setCancelable(false);        pDialog.show();        //  {"Name":"Preview","Email":"care@prtpl.om","Mobile":"9918578212","EmployeeId":"734670"}        JSONObject mainJson = new JSONObject();        try {            mainJson.put("Name", userName);            mainJson.put("Email", mail);            mainJson.put("Mobile", mobile);            mainJson.put("EmployeeId", appSession.getEmployeeUserId());            Log.e("finalsubmission", "final_submission" + mainJson.toString().trim());        } catch (Exception e) {            e.printStackTrace();        }        final String requestBody = mainJson.toString();        StringRequest getRequest = new StringRequest(Request.Method.POST, url,                response -> {                    Log.e("response", ">>result>>>>>" + response);                    pDialog.dismiss();                    try {                        JSONArray jsonArray = new JSONArray(response);                        JSONObject jsonObject = jsonArray.getJSONObject(0);//                        String sno = jsonObject.getString("Sno");                        String resultStatus = jsonObject.getString("ResultStatus");                        String resultMessage = jsonObject.getString("ResultMessage");                        if (resultStatus.equalsIgnoreCase("t")) {                            showAlertDialog(resultMessage);                        } else {                            Toast.makeText(getApplicationContext(), "Some technical problem arise", Toast.LENGTH_SHORT).show();                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                },                error -> {                    pDialog.dismiss();                    NetworkResponse networkResponse = error.networkResponse;                    String errorMessage = "Unknown error";                    if (networkResponse == null) {                        if (error.getClass().equals(TimeoutError.class)) {                            errorMessage = "Request timeout";                            //callTask(1);                        } else if (error.getClass().equals(NoConnectionError.class)) {                            errorMessage = "Failed to connect server";                            utilities.dialogOK(context, getResources().getString(R.string.app_name), errorMessage, "OK", false);                        }                    } else {                        String result = new String(networkResponse.data);                        try {                            if (networkResponse.statusCode == 404) {                                errorMessage = "Resource not found";                            } else if (networkResponse.statusCode == 401) {                                errorMessage = " Please login again";                            } else if (networkResponse.statusCode == 400) {                                errorMessage = " Check your inputs";                                //showFailedDialog();                            } else if (networkResponse.statusCode == 500) {                                errorMessage = " Something is getting wrong";                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                    if (errorMessage.equalsIgnoreCase(" Please login again")) {                        //showExceptionDialogLogin(errorMessage);                    } else {                        //showExceptionDialog(errorMessage);                    }                    Log.e("Error", errorMessage);                    error.printStackTrace();                }        ) {            @Override            public String getBodyContentType() {                return "application/json";            }            @Override            public byte[] getBody() {                try {                    return requestBody == null ? null : requestBody.getBytes("utf-8");                } catch (UnsupportedEncodingException uee) {                    VolleyLog.wtf("Unsupported Encoding while trying to get the bytes of %s using %s", requestBody, "utf-8");                    return null;                }            }            @Override            public Map<String, String> getHeaders() {                Map<String, String> params = new HashMap<String, String>();                params.put("Authorization", "bearer " + appSession.getAccessToken());                Log.e("accesstypetoken", "access_type_token" + " " + "bearer " + appSession.getAccessToken());                return params;            }        };        int socketTimeout = 30 * 1000; // 30 seconds. You can change it        RetryPolicy policy = new DefaultRetryPolicy(socketTimeout,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);        getRequest.setRetryPolicy(policy);        RequestQueue queue = Volley.newRequestQueue(this);        queue.add(getRequest);    }    private void showAlertDialog(String success) {        AlertDialog.Builder builder = new AlertDialog.Builder(Activity_Profile.this);        //builder.setTitle("App Update");        builder.setMessage(success);        builder.setPositiveButton("OK", (dialog, which) -> {            dialog.dismiss();            Intent i = new Intent(Activity_Profile.this, Activity_MainDashboard.class);            i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);            startActivity(i);        });        builder.create();        builder.show();    }}