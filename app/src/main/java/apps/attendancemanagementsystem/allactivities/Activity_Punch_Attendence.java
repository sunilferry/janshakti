package apps.attendancemanagementsystem.allactivities;import android.Manifest;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.icu.text.SimpleDateFormat;import android.location.Address;import android.location.Geocoder;import android.location.Location;import android.location.LocationManager;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.provider.MediaStore;import android.provider.Settings;import android.util.Base64;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.AppCompatButton;import androidx.cardview.widget.CardView;import androidx.core.app.ActivityCompat;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NetworkResponse;import com.android.volley.NoConnectionError;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.RetryPolicy;import com.android.volley.TimeoutError;import com.android.volley.VolleyLog;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.GoogleApiAvailability;import com.google.android.gms.location.FusedLocationProviderClient;import com.google.android.gms.location.LocationCallback;import com.google.android.gms.location.LocationRequest;import com.google.android.gms.location.LocationResult;import com.google.android.gms.location.LocationServices;import com.google.android.gms.maps.model.LatLng;import org.json.JSONArray;import org.json.JSONObject;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.Objects;import apps.attendancemanagementsystem.R;import apps.attendancemanagementsystem.activity.LoginActivity;import apps.attendancemanagementsystem.model.PojoLatLong;import apps.attendancemanagementsystem.utils.AppConstants;import apps.attendancemanagementsystem.utils.AppSession;import apps.attendancemanagementsystem.utils.Cons;import apps.attendancemanagementsystem.utils.ImageUtils;import apps.attendancemanagementsystem.utils.MyUtlis;import apps.attendancemanagementsystem.utils.Utilities;import apps.attendancemanagementsystem.utils.Utils;import static androidx.core.content.FileProvider.getUriForFile;import static apps.attendancemanagementsystem.utils.AppConstants.ACTIVITY_RESULT;import static apps.attendancemanagementsystem.utils.AppConstants.CAMERA;import static apps.attendancemanagementsystem.utils.AppConstants.CROP;public class Activity_Punch_Attendence extends AppCompatActivity implements View.OnClickListener {    private Context context;    private Utilities utilities;    private AppSession appSession;    //    private RadioGroup radioGroup;    private String in_outType = "", picturePath = "", cropPicturePath = "", currentTime = "", currentDate = "", encodedImage = "";    private ImageView ivAdd, iv_bck;    private File photoFile;    private Uri cameraUri = null;    private LinearLayout llClick, llClicked, current_date_time_ll;    private ArrayList<String> imagePathList = new ArrayList<>();    private double lat = 0.0, lng = 0.0;//    private double lat = 26.863748, lng = 83.955681;    private CardView cardview_user_office, show_ll, no_lat_long_cv;    private static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;    private FusedLocationProviderClient mFusedLocationClient;    //    private boolean firstTimeFlag = true;    private TextView locationname_txt, distance_txt, destiantionname_txt, blinking_txt, show_txt, current_date_time;    private boolean enabled = false;    //    private RadioButton rb_public, rb_govt;    double distancevalue;    double kmvalue;    private ProgressDialog pDialog;    private AppCompatButton btn_submit;    private MyUtlis myUtlis;    String attendanceType = "";    LinearLayout ll_punch_in, ll_punch_out;    ImageView img_punch_in, img_punch_out;    TextView punch_in_txt, punch_out_txt, no_lat_long_tv;    boolean checkPunchIn = false;    boolean checkPunchOut = false;    LinearLayout hide_me_image;    private static final long UPDATE_INTERVAL_IN_MILLISECONDS = 500;    private static final long FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS = 500;    public static List<PojoLatLong> pojoLatLongs = new ArrayList<>();    //    List<String> allNames = new ArrayList<String>();    Double distancenearest;    Float distnearest;    List<Double> dsitancelist = new ArrayList<>();    Dialog selectoption_dialog;    String officeIdstr;    String attendanceDateAPI;    String resultStatus;    Geocoder geocoder_new;    @RequiresApi(api = Build.VERSION_CODES.N)    @SuppressLint("SimpleDateFormat")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_punch_attendance);        this.myUtlis = new MyUtlis(this);        this.context = this;        this.utilities = Utilities.getInstance(context);        this.appSession = new AppSession(context);        pDialog = ProgressDialog.show(Activity_Punch_Attendence.this, null, null);        pDialog.setContentView(R.layout.progress_loader_);        Objects.requireNonNull(pDialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        pDialog.setCancelable(false);        pDialog.setCanceledOnTouchOutside(false);        pDialog.show();        current_date_time_ll = findViewById(R.id.current_date_time_ll);        cardview_user_office = findViewById(R.id.cardview_user_office);        llClick = findViewById(R.id.ll_click);        ivAdd = findViewById(R.id.iv_add_images);        llClicked = findViewById(R.id.ll_clicked);        iv_bck = findViewById(R.id.iv_bck);        hide_me_image = findViewById(R.id.hide_me_image);        ll_punch_in = findViewById(R.id.ll_punch_in);        ll_punch_out = findViewById(R.id.ll_punch_out);        img_punch_in = findViewById(R.id.img_punch_in);        img_punch_out = findViewById(R.id.img_punch_out);//        rb_public = findViewById(R.id.rb_public);//        rb_govt = findViewById(R.id.rb_govt);        btn_submit = findViewById(R.id.btn_submit);        current_date_time = findViewById(R.id.current_date_time);        locationname_txt = findViewById(R.id.locationname_txt);        distance_txt = findViewById(R.id.distance_txt);        destiantionname_txt = findViewById(R.id.destiantionname_txt);        blinking_txt = findViewById(R.id.blinking_txt);        show_txt = findViewById(R.id.show_txt);        no_lat_long_tv = findViewById(R.id.no_lat_long_tv);        show_ll = findViewById(R.id.show_ll);        no_lat_long_cv = findViewById(R.id.no_lat_long_cv);        punch_in_txt = findViewById(R.id.punch_in_txt);        punch_out_txt = findViewById(R.id.punch_out_txt);//        radioGroup = findViewById(R.id.radioGroup);//        destiantionname_txt.setText(appSession.getNameofMandi());        ivAdd.setOnClickListener(this);        llClick.setOnClickListener(this);        iv_bck.setOnClickListener(this);        btn_submit.setOnClickListener(this);        ll_punch_in.setOnClickListener(this);        ll_punch_out.setOnClickListener(this);        //radioGroup.setOnCheckedChangeListener(this);//        Animation anim = new AlphaAnimation(0.0f, 1.0f);//        anim.setDuration(500); //You can manage the blinking time with this parameter//        anim.setStartOffset(200);//        anim.setRepeatMode(Animation.REVERSE);//        anim.setRepeatCount(Animation.INFINITE);//        blinking_txt.startAnimation(anim);//        HH:mm:ss aa        Calendar calendar = Calendar.getInstance();        SimpleDateFormat mdformat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss aa");//        currentTime = mdformat.format(calendar.getTime());        //for current date only        Calendar calendar1 = Calendar.getInstance();        SimpleDateFormat mdformat1 = new SimpleDateFormat("dd/MM/yyyy");        currentDate = mdformat1.format(calendar1.getTime());    }//    @SuppressLint("SimpleDateFormat")//    @Override//    public void onCheckedChanged(RadioGroup radioGroup, int checkedId) {//        if (checkedId == R.id.rb_public) {//            rb_public.setChecked(true);//            in_outType = "In";//        } else {//            rb_govt.setChecked(true);//            in_outType = "Out";//        }//        Log.e("in_outType", "in_outType" + in_outType);//    }//    public void onRadioButtonClicked(View view) {//        boolean checked = ((RadioButton) view).isChecked();//        String str = "";//        // Check which radio button was clicked//        switch (view.getId()) {//            case R.id.rb_public://                if (resultStatus.equalsIgnoreCase("In")) {//                    rb_public.setChecked(true);//                    rb_public.setEnabled(false);//                    rb_public.setClickable(false);//                    rb_public.setFocusable(false);//                } else {//                    if (checked)//                        str = "In";//                }//                break;//            case R.id.rb_govt://                if (checked)//                    str = "Out";//                break;//        }//        in_outType = str;//        Toast.makeText(getApplicationContext(), str, Toast.LENGTH_SHORT).show();//    }    @SuppressLint("UseCompatLoadingForDrawables")    @Override    public void onClick(View view) {        if (view.getId() == R.id.iv_add_images) {            try {//                firstTimeFlag = true;                if (imagePathList.size() < 4) {                    openCamera(context);                }            } catch (Exception e) {                e.printStackTrace();            }        }        if (view.getId() == R.id.iv_bck) {            try {                Intent i = new Intent(getApplicationContext(), Activity_MainDashboard.class);                startActivity(i);            } catch (Exception e) {                e.printStackTrace();            }        }        if (view.getId() == R.id.ll_punch_in) {            try {//                if(img_punch_in.getVisibility() == View.VISIBLE){//                    img_punch_in.setVisibility(View.GONE);//                }else{//                    img_punch_in.setVisibility(View.VISIBLE);//                    if (checkPunchIn) {//                        img_punch_in.setImageDrawable(getResources().getDrawable(R.drawable.ic_unselected));//                        in_outType = "";//                    } else {//                        img_punch_in.setImageDrawable(getResources().getDrawable(R.drawable.ic_selected));//                        in_outType = "In";//                    }//                }                if (ll_punch_in.getVisibility() == View.VISIBLE) {                    img_punch_in.setVisibility(View.VISIBLE);                    img_punch_in.setImageDrawable(getResources().getDrawable(R.drawable.ic_selected));                    if (checkPunchIn) {                        img_punch_in.setImageDrawable(getResources().getDrawable(R.drawable.ic_unselected));                        in_outType = "";                    } else {                        img_punch_in.setImageDrawable(getResources().getDrawable(R.drawable.ic_selected));                        in_outType = "In";                    }                    Log.e("printme>>> ", in_outType);                } else {                    img_punch_in.setVisibility(View.VISIBLE);                    img_punch_in.setImageDrawable(getResources().getDrawable(R.drawable.ic_unselected));                }            } catch (Exception e) {                e.printStackTrace();            }        }        if (view.getId() == R.id.ll_punch_out) {            try {                if (ll_punch_out.getVisibility() == View.VISIBLE) {                    img_punch_out.setVisibility(View.VISIBLE);                    img_punch_out.setImageDrawable(getResources().getDrawable(R.drawable.ic_selected));                    if (checkPunchOut) {                        img_punch_out.setImageDrawable(getResources().getDrawable(R.drawable.ic_unselected));                        in_outType = "";                    } else {                        img_punch_out.setImageDrawable(getResources().getDrawable(R.drawable.ic_selected));                        in_outType = "Out";                    }                    Log.e("printme>>> ", in_outType);                } else {                    img_punch_out.setVisibility(View.VISIBLE);                    img_punch_out.setImageDrawable(getResources().getDrawable(R.drawable.ic_unselected));                }//                if(img_punch_out.getVisibility() == View.VISIBLE){//                    img_punch_out.setVisibility(View.VISIBLE);//                    img_punch_out.setImageDrawable(getResources().getDrawable(R.drawable.ic_unselected));//                }else{//                    img_punch_out.setVisibility(View.VISIBLE);//                    if (checkPunchOut) {//                        img_punch_out.setImageDrawable(getResources().getDrawable(R.drawable.ic_unselected));//                        in_outType = "";//                    } else {//                        img_punch_out.setImageDrawable(getResources().getDrawable(R.drawable.ic_selected));//                        in_outType = "Out";//                    }//                    Log.e("printme>>> ",in_outType);//                }            } catch (Exception e) {                e.printStackTrace();            }        }        if (view.getId() == R.id.btn_submit) {            try {                if (Utils.checkNetworkConnection(context)) {                    if (in_outType.equalsIgnoreCase("")) {                        Toast.makeText(getApplicationContext(), "Please select In/Out Punch Time", Toast.LENGTH_LONG).show();                    } else if (encodedImage.equalsIgnoreCase("")) {                        Toast.makeText(getApplicationContext(), "Please select photo for Attendance", Toast.LENGTH_LONG).show();                    } else {                        PostAppCreateAttendance();                    }                } else {                    AlertDialog.Builder builder = new AlertDialog.Builder(Activity_Punch_Attendence.this);                    builder.setCancelable(false);                    builder.setMessage("No internet connection found");                    builder.setPositiveButton("OK", (dialog, which) -> dialog.dismiss());                    builder.create();                    builder.show();                    //Toast.makeText(getApplicationContext(), "No internet connection found", Toast.LENGTH_SHORT).show();                }            } catch (Exception e) {                e.printStackTrace();            }        }    }    private void openCamera(final Context context) {        try {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                // Ensure that there's a camera activity to handle the intent                if (intent.resolveActivity(context.getPackageManager()) != null) {                    // Create the File where the photo should go                    photoFile = null;                    try {                        photoFile = createImageFile();                    } catch (IOException ex) {                        // Error occurred while creating the File                        ex.printStackTrace();                        return;                    }                    // Continue only if the File was successfully created                    if (photoFile != null) {                        cameraUri = getUriForFile(context, context.getPackageName() + ".provider", photoFile);                        appSession.setImageUri(cameraUri);                        intent.putExtra(MediaStore.EXTRA_OUTPUT, cameraUri);                        intent.putExtra("android.intent.extra.USE_FRONT_CAMERA", true);                        intent.putExtra("android.intent.extras.CAMERA_FACING", 1);                        intent.putExtra("android.intent.extras.LENS_FACING_FRONT", 1);                        startActivityForResult(intent, CAMERA);                    }                }            } else {                Intent intent = new Intent();                intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                String fileName = "IMAGE_" + System.currentTimeMillis() + ".jpg";                cameraUri = Uri.fromFile(Utilities.getInstance(context).getNewFile(AppConstants.IMAGE_DIRECTORY, fileName));                appSession.setImageUri(cameraUri);                intent.putExtra(MediaStore.EXTRA_OUTPUT, cameraUri);                intent.putExtra("android.intent.extras.CAMERA_FACING", 1);                intent.putExtra("android.intent.extras.LENS_FACING_FRONT", 1);                intent.putExtra("android.intent.extra.USE_FRONT_CAMERA", true);                intent.putExtra("return-data", true);                startActivityForResult(intent, CAMERA);            }        } catch (Exception e) {            e.printStackTrace();        }    }    private File createImageFile() throws IOException {        // Create an image file name        String fileName = "IMAGE_" + System.currentTimeMillis() + ".jpg";        return Utilities.getInstance(context).getNewFile(AppConstants.IMAGE_DIRECTORY, fileName);    }    @SuppressLint("UseCompatLoadingForDrawables")    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        appSession = new AppSession(context);        if (requestCode == ACTIVITY_RESULT && resultCode == Activity.RESULT_OK) {            //  finish();        }        if (requestCode == CROP && resultCode == Activity.RESULT_OK) {            try {                Uri uriImage = data.getData();                if (uriImage != null) {                    Bitmap bm = uriToBitmap(uriImage);                    Bitmap emptyBitmap = uriToBitmap(uriImage);                    ByteArrayOutputStream baos = new ByteArrayOutputStream();                    Objects.requireNonNull(bm).compress(Bitmap.CompressFormat.JPEG, 100, baos);                    byte[] byt = baos.toByteArray();                    encodedImage = Base64.encodeToString(byt, Base64.DEFAULT);                    Log.e("encodedImage>>  ", "encodedImage>>  " + encodedImage);                    if (bm.sameAs(emptyBitmap)) {                        ivAdd.setImageBitmap(Bitmap.createScaledBitmap(bm, 200, 200, false));                        ivAdd.setBackgroundDrawable(getResources().getDrawable(R.drawable.rectangle_border_green));                        //current_date_time_ll.setVisibility(View.VISIBLE);//                        current_date_time.setText(currentTime);                    } else {                        // current_date_time_ll.setVisibility(View.GONE);                    }                } else {                    Bitmap bm = ImageUtils.getInstant().getCompressedBitmap(cropPicturePath);                    Bitmap emptyBitmap = uriToBitmap(uriImage);                    ByteArrayOutputStream baos = new ByteArrayOutputStream();                    Objects.requireNonNull(bm).compress(Bitmap.CompressFormat.JPEG, 100, baos);                    byte[] byt = baos.toByteArray();                    encodedImage = Base64.encodeToString(byt, Base64.DEFAULT);                    Log.e("encodedImage>>  ", "encodedImage>>  " + encodedImage);                    if (bm.sameAs(emptyBitmap)) {                        ivAdd.setImageBitmap(Bitmap.createScaledBitmap(bm, 200, 200, false));                        ivAdd.setBackgroundDrawable(getResources().getDrawable(R.drawable.rectangle_border_green));                        //current_date_time_ll.setVisibility(View.VISIBLE);//                        current_date_time.setText(currentTime);                    } else {                        //current_date_time_ll.setVisibility(View.GONE);                    }                }                Utilities.getInstance(context).deletePicture();            } catch (Exception e) {                e.printStackTrace();                Toast.makeText(context, "Sorry! image is not cropped.", Toast.LENGTH_LONG).show();            }        } else if (resultCode != Activity.RESULT_CANCELED) {            if (requestCode == CAMERA) {                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                    picturePath = photoFile.getAbsolutePath();                    appSession.setImagePath(picturePath);                    Cursor cursor = context.getContentResolver()                            .query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,                                    new String[]{MediaStore.Images.Media._ID},                                    MediaStore.Images.Media.DATA + "=? ",                                    new String[]{picturePath}, null);                    if (cursor != null && cursor.moveToFirst()) {                        int id = cursor.getInt(cursor.getColumnIndex(MediaStore.MediaColumns._ID));                        cameraUri = Uri.parse("content://media/external/images/media/" + id);                        cursor.close();                    }                    //performCrop(cameraUri);                    Bitmap bm = ImageUtils.getInstant().getCompressedBitmap(picturePath);                    Bitmap emptyBitmap = ImageUtils.getInstant().getCompressedBitmap(picturePath);                    ByteArrayOutputStream baos = new ByteArrayOutputStream();                    Objects.requireNonNull(bm).compress(Bitmap.CompressFormat.JPEG, 100, baos);                    byte[] byt = baos.toByteArray();                    encodedImage = Base64.encodeToString(byt, Base64.DEFAULT);                    Log.e("encodedImage>>  ", "encodedImage>>  " + encodedImage);                    if (bm.sameAs(emptyBitmap)) {                        ivAdd.setImageBitmap(Bitmap.createScaledBitmap(bm, 200, 200, false));                        ivAdd.setBackgroundDrawable(getResources().getDrawable(R.drawable.rectangle_border_green));                        //current_date_time_ll.setVisibility(View.VISIBLE);//                        current_date_time.setText(currentTime);                    } else {                        //  current_date_time_ll.setVisibility(View.GONE);                    }                } else {                    try {                        if (cameraUri == null)                            cameraUri = appSession.getImageUri();                        if (cameraUri != null) {                            picturePath = Utilities.getInstance(context).getAbsolutePath(cameraUri);                            if (picturePath == null || picturePath.equals(""))                                picturePath = cameraUri.getPath();                            appSession.setImagePath(picturePath);                            Cursor cursor = context.getContentResolver()                                    .query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,                                            new String[]{MediaStore.Images.Media._ID},                                            MediaStore.Images.Media.DATA + "=? ",                                            new String[]{picturePath}, null);                            if (cursor != null && cursor.moveToFirst()) {                                int id = cursor.getInt(cursor.getColumnIndex(MediaStore.MediaColumns._ID));                                cameraUri = Uri.parse("content://media/external/images/media/" + id);                                cursor.close();                            }                            //performCrop(cameraUri);                            Bitmap bm = ImageUtils.getInstant().getCompressedBitmap(picturePath);                            Bitmap emptyBitmap = ImageUtils.getInstant().getCompressedBitmap(picturePath);                            ByteArrayOutputStream baos = new ByteArrayOutputStream();                            Objects.requireNonNull(bm).compress(Bitmap.CompressFormat.JPEG, 100, baos);                            byte[] byt = baos.toByteArray();                            encodedImage = Base64.encodeToString(byt, Base64.DEFAULT);                            Log.e("encodedImage>>  ", "encodedImage>>  " + encodedImage);                            if (bm.sameAs(emptyBitmap)) {                                ivAdd.setImageBitmap(Bitmap.createScaledBitmap(bm, 200, 200, false));                                ivAdd.setBackgroundDrawable(getResources().getDrawable(R.drawable.rectangle_border_green));                                // current_date_time_ll.setVisibility(View.VISIBLE);//                                current_date_time.setText(currentTime);                            } else {                                // current_date_time_ll.setVisibility(View.GONE);                            }                        } else {                            Toast.makeText(context, "माफ़ कीजिये! इमेज कैप्चर नहीं हो पाई है ।", Toast.LENGTH_LONG).show();                        }                    } catch (Exception e) {                        e.printStackTrace();                        Toast.makeText(context, "माफ़ कीजिये! इमेज कैप्चर नहीं हो पाई है ।", Toast.LENGTH_LONG).show();                    }                }            }        }    }    private Bitmap uriToBitmap(Uri uri) {        Bitmap bm = null;        try {            bm = MediaStore.Images.Media.getBitmap(context.getContentResolver(), uri);        } catch (IOException e) {            e.printStackTrace();        }        return bm;    }//    private void showZoomDialog(int pos) {//        Dialog selectoption_dialog = new Dialog(context, R.style.CustomDialogAnimation);//        selectoption_dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);//        selectoption_dialog.setContentView(R.layout.dialog_zoom_image);//        selectoption_dialog.setCanceledOnTouchOutside(true);//        selectoption_dialog.setCancelable(true);//        selectoption_dialog.show();////        ImageView zoomView = selectoption_dialog.findViewById(R.id.zoomView);////        byte[] imageBytes = Base64.decode(imagePathList.get(pos), Base64.DEFAULT);//        Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);//        if (imagePathList.get(pos) != null && !imagePathList.get(pos).equals("")) {//            zoomView.setImageBitmap(decodedImage);//        }//    }    private boolean isGooglePlayServicesAvailable() {        GoogleApiAvailability googleApiAvailability = GoogleApiAvailability.getInstance();        int status = googleApiAvailability.isGooglePlayServicesAvailable(context);        if (ConnectionResult.SUCCESS == status)            return true;        else {            if (googleApiAvailability.isUserResolvableError(status))                Toast.makeText(context, "Please install Google Play services to use this application", Toast.LENGTH_LONG).show();        }        return false;    }    private void startCurrentLocationUpdates() {        LocationRequest locationRequest = LocationRequest.create();        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);        locationRequest.setInterval(UPDATE_INTERVAL_IN_MILLISECONDS);        locationRequest.setFastestInterval(FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS);//        locationRequest.setInterval(3000);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            if (ActivityCompat.checkSelfPermission(context,                    Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &&                    ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                ActivityCompat.requestPermissions(Objects.requireNonNull(this),                        new String[]{Manifest.permission.ACCESS_FINE_LOCATION,                                Manifest.permission.ACCESS_COARSE_LOCATION},                        MY_PERMISSIONS_REQUEST_LOCATION);                return;            }        }        mFusedLocationClient.requestLocationUpdates(locationRequest, mLocationCallback, Looper.myLooper());    }    private final LocationCallback mLocationCallback = new LocationCallback() {        @SuppressLint("SetTextI18n")        @Override        public void onLocationResult(LocationResult locationResult) {            super.onLocationResult(locationResult);            if (locationResult.getLastLocation() == null)                return;            final Location currentLocation = locationResult.getLastLocation();//            if (firstTimeFlag) {            LatLng startLatLng = new LatLng(currentLocation.getLatitude(), currentLocation.getLongitude());            lat = startLatLng.latitude;            lng = startLatLng.longitude;            Log.e("currentlocation", "currentlocation" + lat + "," + lng);            new Handler().postDelayed(() -> {                if (Utilities.getInstance(context).isNetworkAvailable()) {                    Geocoder geocoder_new = new Geocoder(context, Locale.getDefault());                    Log.e("geocoder_new", "geocoder_new" + geocoder_new.toString());                    try {                        List<Address> listAddresses1 = geocoder_new.getFromLocation(lat, lng, 1);                        if (listAddresses1 != null && listAddresses1.size() > 0) {                            if (listAddresses1.get(0).getAddressLine(0) != null && !listAddresses1.get(0).getAddressLine(0).equalsIgnoreCase("")) {                                Log.e("locationame", "locationame" + listAddresses1.get(0).getAddressLine(0));                                locationname_txt.setText(listAddresses1.get(0).getSubLocality() + " , " + listAddresses1.get(0).getLocality());                                no_lat_long_tv.setText(listAddresses1.get(0).getSubLocality() + " , " + listAddresses1.get(0).getLocality());                                if (pDialog.isShowing()) {                                    if (Utils.checkNetworkConnection(context)) {                                        pojoLatLongs.clear();                                        getAllLatitude();                                    } else {                                        AlertDialog.Builder builder = new AlertDialog.Builder(Activity_Punch_Attendence.this);                                        builder.setMessage("No internet connection found");                                        builder.setPositiveButton("OK", (dialog, which) -> dialog.dismiss());                                        builder.create();                                        builder.show();                                        // Toast.makeText(getApplicationContext(), "No internet connection found", Toast.LENGTH_LONG).show();                                    }                                    pDialog.dismiss();                                }                            } else {                                locationname_txt.setText("No Location found");                                blinking_txt.setText("Google Unable to get your current location,please come to location to punch attendance");                                show_txt.setVisibility(View.GONE);                            }                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                }            }, 50);//                firstTimeFlag = false;            if (mFusedLocationClient != null)                mFusedLocationClient.removeLocationUpdates(mLocationCallback);        }//        }    };    @Override    public void onStart() {        super.onStart();        new Handler().postDelayed(() -> {            try {                LocationManager service = (LocationManager) getSystemService(LOCATION_SERVICE);                enabled = Objects.requireNonNull(service).isProviderEnabled(LocationManager.GPS_PROVIDER);                if (!enabled) {                    showAlertGps("Please enable GPS first");                } else {                    if (isGooglePlayServicesAvailable()) {                        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(context);                        startCurrentLocationUpdates();                    }                }            } catch (Exception e) {                e.printStackTrace();            }        }, 3000);    }    @Override    public void onStop() {        super.onStop();        if (mFusedLocationClient != null)            mFusedLocationClient.removeLocationUpdates(mLocationCallback);    }    @Override    public void onDestroy() {        super.onDestroy();        mFusedLocationClient = null;    }    @Override    public void onResume() {        super.onResume();        new Handler().postDelayed(() -> {            try {                LocationManager service = (LocationManager) getSystemService(LOCATION_SERVICE);                enabled = Objects.requireNonNull(service).isProviderEnabled(LocationManager.GPS_PROVIDER);                if (!enabled) {                    showAlertGps("Please enable GPS first");                } else {                    if (isGooglePlayServicesAvailable()) {                        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(context);                        startCurrentLocationUpdates();                    }                }            } catch (Exception e) {                e.printStackTrace();            }        }, 3000);    }    private void showAlertGps(String message) {        AlertDialog.Builder builder = new AlertDialog.Builder(context);        builder.setMessage(message);        builder.setPositiveButton("Ok", (dialog, which) -> {            try {                dialog.dismiss();                Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);                startActivity(intent);            } catch (Exception e) {                e.printStackTrace();            }        });        builder.create();        builder.show();    }    private void getAllLatitude() {        String url = Cons.serverUrl + "api/android/App_GetEmployeeLatLongRecord";        Log.e("SAVED Url >>>>>> ", url);        JSONObject mainJson = new JSONObject();        try {            mainJson.put("EmployeeId", appSession.getEmployeeUserId());            Log.e("EmployeeId", "EmployeeId" + mainJson.toString().trim());        } catch (Exception e) {            e.printStackTrace();        }        final String requestBody = mainJson.toString();        StringRequest getRequest = new StringRequest(Request.Method.POST, url,                response -> {                    Log.e("response", ">>result>>>>>" + response.toString());                    try {                        if (!response.equalsIgnoreCase("")) {                            if (!response.contains("<!DOCTYPE html>")) {                                try {                                    JSONObject jsonObject = new JSONObject(response);                                    Log.e("bind_response", "onResponse: " + jsonObject);                                    if (jsonObject.getString("ResultStatus").equals("True")) {                                        if (jsonObject.getString("Record").equals("")) {                                            //employee_details_ll.setVisibility(View.GONE);                                            show_ll.setVisibility(View.GONE);                                            no_lat_long_cv.setVisibility(View.VISIBLE);//                                        cardview_user_office.setVisibility(View.GONE);                                        } else {                                            show_ll.setVisibility(View.VISIBLE);                                            cardview_user_office.setVisibility(View.VISIBLE);                                            no_lat_long_cv.setVisibility(View.GONE);                                            //employee_details_ll.setVisibility(View.VISIBLE);                                            JSONArray jsonArray = jsonObject.getJSONArray("Record");                                            Log.e("jsonArray_length", "" + jsonArray.length());                                            if (jsonArray.length() > 0) {//                                            cardview_user_office.setVisibility(View.VISIBLE);                                                show_ll.setVisibility(View.VISIBLE);                                                no_lat_long_cv.setVisibility(View.GONE);                                                for (int i = 0; i < jsonArray.length(); i++) {                                                    pojoLatLongs.add(new PojoLatLong(jsonArray.getJSONObject(i).getString("NameofOffice"),                                                            jsonArray.getJSONObject(i).getDouble("Lat"),                                                            jsonArray.getJSONObject(i).getDouble("Long"),                                                            jsonArray.getJSONObject(i).getString("OfficeId")                                                    ));                                                    Log.e("maindsitance", "maindsitance" + distance(lat, lng, pojoLatLongs.get(i).getLat(),                                                            pojoLatLongs.get(i).getLongittude(), pojoLatLongs.get(i).getNameofOffice(),                                                            pojoLatLongs.get(i).getOfficeId()));                                                }                                                calculateFinalDist();                                                new Handler().postDelayed(() -> {                                                    try {                                                        LocationManager service = (LocationManager) getSystemService(LOCATION_SERVICE);                                                        enabled = Objects.requireNonNull(service).isProviderEnabled(LocationManager.GPS_PROVIDER);                                                        if (!enabled) {                                                            showAlertGps("Please enable GPS first");                                                        } else {                                                            if (isGooglePlayServicesAvailable()) {                                                                mFusedLocationClient = LocationServices.getFusedLocationProviderClient(context);                                                                startCurrentLocationUpdates();                                                            }                                                        }                                                    } catch (Exception e) {                                                        e.printStackTrace();                                                    }                                                }, 3000);                                            } else {                                                //cardview_user_office.setVisibility(View.GONE);                                                show_ll.setVisibility(View.GONE);                                                no_lat_long_cv.setVisibility(View.VISIBLE);                                            }                                        }                                    } else {                                        show_ll.setVisibility(View.GONE);                                        no_lat_long_cv.setVisibility(View.VISIBLE);                                        //cardview_user_office.setVisibility(View.GONE);                                        //employee_details_ll.setVisibility(View.GONE);                                    }                                } catch (Exception e) {                                    e.printStackTrace();                                }                            } else {                                showLogoutAlert();                            }                        } else {                            show_ll.setVisibility(View.GONE);                            no_lat_long_cv.setVisibility(View.VISIBLE);                            // cardview_user_office.setVisibility(View.GONE);                            //employee_details_ll.setVisibility(View.GONE);                            //pDialog.dismiss();                        }                    } catch (Error | Exception e) {                        e.printStackTrace();                    }                },                error -> {//                    pDialog.dismiss();                    NetworkResponse networkResponse = error.networkResponse;                    String errorMessage = "Unknown error";                    if (networkResponse == null) {                        if (error.getClass().equals(TimeoutError.class)) {                            errorMessage = "Request timeout";                            //callTask(1);                        } else if (error.getClass().equals(NoConnectionError.class)) {                            errorMessage = "Failed to connect server";                            utilities.dialogOK(context, getResources().getString(R.string.app_name), errorMessage, "OK", false);                        }                    } else {                        String result = new String(networkResponse.data);                        try {                            if (networkResponse.statusCode == 404) {                                errorMessage = "Resource not found";                            } else if (networkResponse.statusCode == 401) {                                errorMessage = " Please login again";                            } else if (networkResponse.statusCode == 400) {                                errorMessage = " Check your inputs";                                //showFailedDialog();                            } else if (networkResponse.statusCode == 500) {                                errorMessage = " Something is getting wrong";                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                    if (errorMessage.equalsIgnoreCase(" Please login again")) {                        //showExceptionDialogLogin(errorMessage);                    } else {                        //showExceptionDialog(errorMessage);                    }                    Log.e("Error", errorMessage);                    error.printStackTrace();                }        ) {            @Override            public String getBodyContentType() {                return "application/json";            }            @Override            public byte[] getBody() {                try {                    return requestBody == null ? null : requestBody.getBytes("utf-8");                } catch (UnsupportedEncodingException uee) {                    VolleyLog.wtf("Unsupported Encoding while trying to get the bytes of %s using %s", requestBody, "utf-8");                    return null;                }            }            @Override            public Map<String, String> getHeaders() {                Map<String, String> params = new HashMap<String, String>();                params.put("Authorization", "bearer " + appSession.getAccessToken());                Log.e("accesstypetoken", "access_type_token" + " " + "bearer " + appSession.getAccessToken());                return params;            }        };        int socketTimeout = 30 * 1000; // 30 seconds. You can change it        RetryPolicy policy = new DefaultRetryPolicy(socketTimeout,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);        getRequest.setRetryPolicy(policy);        RequestQueue queue = Volley.newRequestQueue(this);        queue.add(getRequest);    }    @SuppressLint({"SetTextI18n", "DefaultLocale"})    public float distance(double lat1, double lng1, double lat2, double lng2, String name, String officeIdshow) {        double earthRadius = 6371000; //meters        double dLat = Math.toRadians(lat2 - lat1);        double dLng = Math.toRadians(lng2 - lng1);        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *                Math.sin(dLng / 2) * Math.sin(dLng / 2);        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));        float dist = (float) (earthRadius * c);        Log.e("dist>>>>>>", "dist>>>" + dist);        distancevalue = Double.parseDouble(String.format("%.2f", dist));        dsitancelist.add(distancevalue);        if (distancenearest == null || distancenearest > distancevalue) {            distancenearest = distancevalue;            destiantionname_txt.setText(name);            officeIdstr = officeIdshow;            Log.e("officeIdstr>>>>>>>>>>", "officeIdstr>>>>>>>>>>" + officeIdstr);        }        if (distnearest == null || distnearest > dist) {            distnearest = dist;        }        return dist;    }    @SuppressLint({"SetTextI18n", "DefaultLocale"})    private void calculateFinalDist() {        //localallNames.add(distancevalue);//        Log.e("",""+);        if (distancenearest >= 1000) {            kmvalue = distancenearest / 1000;            distance_txt.setText(String.format("%.2f", kmvalue) + " KM");            Log.e("kmvalue", "kmvalue" + kmvalue);        } else {            distance_txt.setText(String.format("%.2f", distnearest) + " Meters");        }        if (distancenearest < 100) {            cardview_user_office.setVisibility(View.VISIBLE);            show_ll.setVisibility(View.VISIBLE);            no_lat_long_cv.setVisibility(View.GONE);            blinking_txt.setVisibility(View.VISIBLE);            show_txt.setVisibility(View.VISIBLE);            if (distancenearest >= 1000) {                blinking_txt.setText("You are " + String.format("%.2f", kmvalue) + " KM away from Office");            } else {                blinking_txt.setText("You are " + String.format("%.2f", distnearest) + " Meters away from Office");            }            check_internet();            if (Utils.checkNetworkConnection(context)) {                getAttendance();            } else {                AlertDialog.Builder builder = new AlertDialog.Builder(Activity_Punch_Attendence.this);                builder.setMessage("No internet connection found");                builder.setPositiveButton("OK", (dialog, which) -> dialog.dismiss());                builder.create();                builder.show();                // Toast.makeText(getApplicationContext(), "No internet connection found", Toast.LENGTH_LONG).show();            }        } else {            cardview_user_office.setVisibility(View.VISIBLE);            no_lat_long_cv.setVisibility(View.GONE);            show_ll.setVisibility(View.GONE);            blinking_txt.setVisibility(View.VISIBLE);            show_txt.setVisibility(View.VISIBLE);            if (distancenearest >= 1000) {                blinking_txt.setText("You are " + String.format("%.2f", kmvalue) + " KM away from Office");            } else {                blinking_txt.setText("You are " + String.format("%.2f", distnearest) + " Meters away from Office");            }        }    }    //get the punch_in or punch_out process    private void getAttendance() {        String url = Cons.serverUrl + "api/android/App_GetTodayAttendance";        Log.e("SAVED Url >>>>>> ", url);        JSONObject mainJson = new JSONObject();        try {            mainJson.put("EmployeeId", appSession.getEmployeeUserId());            Log.e("EmployeeId", "EmployeeUserId" + mainJson.toString().trim());        } catch (Exception e) {            e.printStackTrace();        }        final String requestBody = mainJson.toString();        StringRequest getRequest = new StringRequest(Request.Method.POST, url,                response -> {                    Log.e("response", ">>result>>>>>" + response.toString());//                    pDialog.dismiss();                    try {                        JSONArray jsonArray = new JSONArray(response);                        JSONObject jsonObject = jsonArray.getJSONObject(0);                        resultStatus = jsonObject.getString("ResultStatus");                        if (resultStatus.equalsIgnoreCase("t")) {                            attendanceType = jsonObject.getString("AttendanceType");                            attendanceDateAPI = jsonObject.getString("AttendanceDate");                            current_date_time_ll.setVisibility(View.VISIBLE);                            currentTime = jsonObject.getString("AttendanceTakenDatetime");                            current_date_time.setText(attendanceDateAPI + "  " + currentTime);                            if (attendanceType.equalsIgnoreCase("In")) {                                ll_punch_in.setEnabled(false);                                ll_punch_in.setClickable(false);                                ll_punch_in.setFocusable(false);                                img_punch_in.setImageDrawable(getResources().getDrawable(R.drawable.ic_selected_grey));                                punch_in_txt.setTextColor(getResources().getColor(R.color.gray_light));                            } else if (attendanceType.equalsIgnoreCase("Out")) {                                ll_punch_in.setEnabled(true);                                ll_punch_in.setClickable(true);                                ll_punch_in.setFocusable(true);                                img_punch_in.setImageDrawable(getResources().getDrawable(R.drawable.ic_unselected));                                ll_punch_out.setEnabled(false);                                ll_punch_out.setClickable(false);                                ll_punch_out.setFocusable(false);                                img_punch_out.setImageDrawable(getResources().getDrawable(R.drawable.ic_unselected_grey));                                punch_in_txt.setTextColor(getResources().getColor(R.color.colorPrimaryDark));                                punch_out_txt.setTextColor(getResources().getColor(R.color.gray_light));                                hide_me_image.setVisibility(View.VISIBLE);                            } else {                                ll_punch_out.setEnabled(false);                                ll_punch_out.setClickable(false);                                ll_punch_out.setFocusable(false);                                //Toast.makeText(getApplicationContext(), "Some technical problem arised", Toast.LENGTH_SHORT).show();                            }                        } else {                            ll_punch_out.setEnabled(false);                            ll_punch_out.setClickable(false);                            ll_punch_out.setFocusable(false);                            punch_out_txt.setTextColor(getResources().getColor(R.color.gray_light));                            img_punch_out.setImageDrawable(getResources().getDrawable(R.drawable.ic_unselected_grey));                            current_date_time_ll.setVisibility(View.GONE);                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                },                error -> {//                    pDialog.dismiss();                    NetworkResponse networkResponse = error.networkResponse;                    String errorMessage = "Unknown error";                    if (networkResponse == null) {                        if (error.getClass().equals(TimeoutError.class)) {                            errorMessage = "Request timeout";                            //callTask(1);                        } else if (error.getClass().equals(NoConnectionError.class)) {                            errorMessage = "Failed to connect server";                            utilities.dialogOK(context, getResources().getString(R.string.app_name), errorMessage, "OK", false);                        }                    } else {                        String result = new String(networkResponse.data);                        try {                            if (networkResponse.statusCode == 404) {                                errorMessage = "Resource not found";                            } else if (networkResponse.statusCode == 401) {                                errorMessage = " Please login again";                            } else if (networkResponse.statusCode == 400) {                                errorMessage = " Check your inputs";                                //showFailedDialog();                            } else if (networkResponse.statusCode == 500) {                                errorMessage = " Something is getting wrong";                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                    if (errorMessage.equalsIgnoreCase(" Please login again")) {                        //showExceptionDialogLogin(errorMessage);                    } else {                        //showExceptionDialog(errorMessage);                    }                    Log.e("Error", errorMessage);                    error.printStackTrace();                }        ) {            @Override            public String getBodyContentType() {                return "application/json";            }            @Override            public byte[] getBody() {                try {                    return requestBody == null ? null : requestBody.getBytes("utf-8");                } catch (UnsupportedEncodingException uee) {                    VolleyLog.wtf("Unsupported Encoding while trying to get the bytes of %s using %s", requestBody, "utf-8");                    return null;                }            }            @Override            public Map<String, String> getHeaders() {                Map<String, String> params = new HashMap<String, String>();                params.put("Authorization", "bearer " + appSession.getAccessToken());                Log.e("accesstypetoken", "access_type_token" + " " + "bearer " + appSession.getAccessToken());                return params;            }        };        int socketTimeout = 30 * 1000; // 30 seconds. You can change it        RetryPolicy policy = new DefaultRetryPolicy(socketTimeout,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);        getRequest.setRetryPolicy(policy);        RequestQueue queue = Volley.newRequestQueue(this);        queue.add(getRequest);    }    private void check_internet() {        ConnectivityManager connectivitymanager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo[] networkInfo = connectivitymanager.getAllNetworkInfo();        for (NetworkInfo netInfo : networkInfo) {            if (netInfo.getTypeName().equalsIgnoreCase("WIFI")) {                if (netInfo.isConnected()) {                    String wifiIp = myUtlis.getWifiIPAddress();                    appSession.setIP_address(wifiIp);                    Log.e("wifiIp", "check_internet: " + wifiIp);                }            } else {                if (netInfo.isConnected()) {                    String mobileIp = myUtlis.getMobileIPAddress();                    appSession.setIP_address(mobileIp);                    Log.e("mobileIp", "check_internet: " + mobileIp);                }            }        }    }    //for posting the attendance    private void PostAppCreateAttendance() {        String url = Cons.serverUrl + "api/android/App_CreateAttendance";        Log.e("SAVED Url >>>>>> ", url);        final ProgressDialog pDialog = ProgressDialog.show(Activity_Punch_Attendence.this, null, null);        pDialog.setContentView(R.layout.progress_loader);        Objects.requireNonNull(pDialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        pDialog.setCancelable(false);        pDialog.show();        JSONObject mainJson = new JSONObject();        try {            if (attendanceType.equalsIgnoreCase("Out")) {                mainJson.put("AttendanceDate", currentDate);            } else if (attendanceType.equalsIgnoreCase("")) {                mainJson.put("AttendanceDate", currentDate);            } else {                mainJson.put("AttendanceDate", attendanceDateAPI);            }            mainJson.put("MandiUniqueId", officeIdstr);            mainJson.put("EmployeeUserId", appSession.getEmployeeUserId());            mainJson.put("AttendanceType", in_outType);            mainJson.put("Latitude", lat);            mainJson.put("Longitude", lng);            mainJson.put("IPAddress", appSession.getIP_address());            mainJson.put("Image", encodedImage);            Log.e("finalsubmission", "final_submission" + mainJson.toString().trim());        } catch (Exception e) {            e.printStackTrace();        }        final String requestBody = mainJson.toString();        StringRequest getRequest = new StringRequest(Request.Method.POST, url,                response -> {                    Log.e("response", ">>result>>>>>" + response);                    pDialog.dismiss();                    try {                        JSONArray jsonArray = new JSONArray(response);                        JSONObject jsonObject = jsonArray.getJSONObject(0);                        String resultStatus = jsonObject.getString("ResultStatus");                        if (resultStatus.equalsIgnoreCase("1")) {                            AlertDialog.Builder builder = new AlertDialog.Builder(Activity_Punch_Attendence.this);                            builder.setMessage("You attendance has been done successfully");                            builder.setPositiveButton("OK", (dialog, which) -> {                                dialog.dismiss();                                Intent i = new Intent(getApplicationContext(), Activity_MainDashboard.class);                                startActivity(i);                                finish();                            });                            builder.create();                            builder.show();                            //showSuccessDialog();                        } else if (resultStatus.equalsIgnoreCase("0")) {                            Toast.makeText(getApplicationContext(), "Some technical problem occurred", Toast.LENGTH_SHORT).show();                        } else {                            AlertDialog.Builder builder1 = new AlertDialog.Builder(Activity_Punch_Attendence.this);                            builder1.setMessage("You have done with your Today's attendance,Come next day to punch attendance");                            builder1.setPositiveButton("OK", (dialog, which) -> {                                dialog.dismiss();                                Intent i = new Intent(getApplicationContext(), Activity_MainDashboard.class);                                startActivity(i);                                finish();                            });                            builder1.create();                            builder1.show();                            //Toast.makeText(getApplicationContext(), "Done with Today's attendance", Toast.LENGTH_SHORT).show();                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                },                error -> {                    pDialog.dismiss();                    NetworkResponse networkResponse = error.networkResponse;                    String errorMessage = "Unknown error";                    if (networkResponse == null) {                        if (error.getClass().equals(TimeoutError.class)) {                            errorMessage = "Request timeout";                            //callTask(1);                        } else if (error.getClass().equals(NoConnectionError.class)) {                            errorMessage = "Failed to connect server";                            utilities.dialogOK(context, getResources().getString(R.string.app_name), errorMessage, "OK", false);                        }                    } else {                        String result = new String(networkResponse.data);                        try {                            if (networkResponse.statusCode == 404) {                                errorMessage = "Resource not found";                            } else if (networkResponse.statusCode == 401) {                                errorMessage = " Please login again";                            } else if (networkResponse.statusCode == 400) {                                errorMessage = " Check your inputs";                                //showFailedDialog();                            } else if (networkResponse.statusCode == 500) {                                errorMessage = " Something is getting wrong";                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                    if (errorMessage.equalsIgnoreCase(" Please login again")) {                        //showExceptionDialogLogin(errorMessage);                    } else {                        //showExceptionDialog(errorMessage);                    }                    Log.e("Error", errorMessage);                    error.printStackTrace();                }        ) {            @Override            public String getBodyContentType() {                return "application/json";            }            @Override            public byte[] getBody() {                try {                    return requestBody == null ? null : requestBody.getBytes("utf-8");                } catch (UnsupportedEncodingException uee) {                    VolleyLog.wtf("Unsupported Encoding while trying to get the bytes of %s using %s", requestBody, "utf-8");                    return null;                }            }            @Override            public Map<String, String> getHeaders() {                Map<String, String> params = new HashMap<String, String>();                params.put("Authorization", "bearer " + appSession.getAccessToken());                Log.e("accesstypetoken", "access_type_token" + " " + "bearer " + appSession.getAccessToken());                return params;            }        };        int socketTimeout = 30 * 1000; // 30 seconds. You can change it        RetryPolicy policy = new DefaultRetryPolicy(socketTimeout,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);        getRequest.setRetryPolicy(policy);        RequestQueue queue = Volley.newRequestQueue(this);        queue.add(getRequest);    }    private void showLogoutAlert() {        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(this);        builder.setMessage("Your App session has been expired, please Logout from the App now?")                .setCancelable(false)                .setPositiveButton("Yes", (dialog, id) -> {                    appSession.setLogin(false);                    appSession.setUsername(null);                    appSession.setNameofMandi(null);                    appSession.setMandiUniqueId(null);                    appSession.setAddressofMandi(null);                    appSession.setEmployeeUserId(null);                    appSession.setAccessToken(null);                    Intent i = new Intent(Activity_Punch_Attendence.this, LoginActivity.class);                    startActivity(i);                    finish();                })                .setNegativeButton("No", (dialog, id) -> dialog.cancel());        androidx.appcompat.app.AlertDialog alert = builder.create();        alert.show();    }}