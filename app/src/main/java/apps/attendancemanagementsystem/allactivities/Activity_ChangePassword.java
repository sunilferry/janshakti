package apps.attendancemanagementsystem.allactivities;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Bundle;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.View;import android.view.animation.AlphaAnimation;import android.view.animation.Animation;import android.widget.ImageView;import android.widget.Toast;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.AppCompatButton;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NetworkResponse;import com.android.volley.NoConnectionError;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.TimeoutError;import com.android.volley.VolleyLog;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.google.android.material.textfield.TextInputEditText;import com.google.android.material.textfield.TextInputLayout;import org.json.JSONArray;import org.json.JSONObject;import java.io.UnsupportedEncodingException;import java.security.NoSuchAlgorithmException;import java.util.HashMap;import java.util.Map;import java.util.Objects;import apps.attendancemanagementsystem.R;import apps.attendancemanagementsystem.activity.LoginActivity;import apps.attendancemanagementsystem.utils.AppSession;import apps.attendancemanagementsystem.utils.Cons;import apps.attendancemanagementsystem.utils.MyUtlis;import apps.attendancemanagementsystem.utils.Utilities;public class Activity_ChangePassword extends AppCompatActivity implements View.OnClickListener {    private Utilities utilities;    private AppSession appSession;    private ImageView iv_bck;    private TextInputEditText etold_password, etnew_password, etconfirm_new_password;    private TextInputLayout txt_old_password, txt_new_password, txt_confirm_new_password;    private String mobileNo = "", oldPassword = "", newPassword = "";    private AppCompatButton btn_submit;    private MyUtlis myUtlis;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity__change_password);        this.myUtlis = new MyUtlis(this);        utilities = Utilities.getInstance(this);        appSession = new AppSession(this);        iv_bck = findViewById(R.id.iv_bck);        iv_bck.setOnClickListener(this);        Animation anim = new AlphaAnimation(0.0f, 1.0f);        anim.setDuration(500); //You can manage the blinking time with this parameter        anim.setStartOffset(200);        anim.setRepeatMode(Animation.REVERSE);        anim.setRepeatCount(Animation.INFINITE);        txt_old_password = findViewById(R.id.til_old_password);        txt_new_password = findViewById(R.id.til_new_password);        txt_confirm_new_password = findViewById(R.id.til_confirm_password);        etold_password = findViewById(R.id.et_old_password);        etnew_password = findViewById(R.id.et_new_password);        etconfirm_new_password = findViewById(R.id.et_confirm_password);        btn_submit = findViewById(R.id.btn_submit);        btn_submit.setOnClickListener(this);        check_internet();        //for password        TextWatcher textWatcher_pass = new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {                //To change body of implemented methods use File | Settings | File Templates.            }            @Override            public void onTextChanged(CharSequence s, int i, int i1, int i2) {                if (s.length() > 5) {                    txt_new_password.setErrorEnabled(false);                } else if (s.length() > 0 && s.length() < 6) {                    txt_new_password.setErrorEnabled(true);                    txt_new_password.setError("Password must be at least 6 characters");                } else {                    txt_new_password.setErrorEnabled(true);                    txt_new_password.setError("Please enter old password");                }            }            @Override            public void afterTextChanged(Editable editable) {            }        };        etnew_password.addTextChangedListener(textWatcher_pass);        //for password        TextWatcher textWatcher_confirmpass = new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {                //To change body of implemented methods use File | Settings | File Templates.            }            @Override            public void onTextChanged(CharSequence s, int i, int i1, int i2) {                if (s.length() > 5) {                    txt_confirm_new_password.setErrorEnabled(false);                } else if (s.length() > 0 && s.length() < 6) {                    txt_confirm_new_password.setErrorEnabled(true);                    txt_confirm_new_password.setError("Password must be at least 6 characters");                } else {                    txt_confirm_new_password.setErrorEnabled(true);                    txt_confirm_new_password.setError("Please enter new password ");                }            }            @Override            public void afterTextChanged(Editable editable) {            }        };        etconfirm_new_password.addTextChangedListener(textWatcher_confirmpass);    }    @Override    public void onClick(View view) {        if (view.getId() == R.id.iv_bck) {            Intent i = new Intent(getApplicationContext(), Activity_Profile.class);            i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);            startActivity(i);        }        if (view.getId() == R.id.btn_submit) {            if (allfieldsverification()) {                oldPassword = etold_password.getText().toString();                newPassword = etnew_password.getText().toString();//                    jsonObject.put("OldPassword", etold_password.getText().toString());//                    jsonObject.put("NewPassword", etnew_password.getText().toString());                if (Utilities.getInstance(Activity_ChangePassword.this).isNetworkAvailable()) {                    postchangepassword();                } else {                    android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(Activity_ChangePassword.this);                    builder.setMessage("No internet connection found");                    builder.setPositiveButton("OK", (dialog, which) -> dialog.dismiss());                    builder.create();                    builder.show();                }            }        }    }    private boolean allfieldsverification() {        if (etold_password.getText().toString().trim().equalsIgnoreCase("")) {            txt_old_password.setErrorEnabled(true);            txt_old_password.setError("Please enter old password");            return false;        } else if (etnew_password.getText().toString().trim().equalsIgnoreCase("")) {            txt_new_password.setErrorEnabled(true);            txt_new_password.setError("Please enter new password");            return false;        } else if (etconfirm_new_password.getText().toString().trim().equalsIgnoreCase("")) {//            error = "Please enter confirm password";            txt_confirm_new_password.setErrorEnabled(true);            txt_confirm_new_password.setError("Please enter confirm new password");            return false;        }        if (!etconfirm_new_password.getText().toString().equals(etnew_password.getText().toString())) {            //error = Cons.match_password;            txt_confirm_new_password.setErrorEnabled(true);            txt_confirm_new_password.setError("Entered confirm password doesn't match with above password");            return false;        }        return true;    }    private void postchangepassword() {        String url = Cons.serverUrl + "api/android/App_ChangePassword";        final ProgressDialog pDialog = ProgressDialog.show(Activity_ChangePassword.this, null, null);        pDialog.setContentView(R.layout.progress_loader);        Objects.requireNonNull(pDialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        pDialog.setCancelable(false);        pDialog.show();        JSONObject jsonObject = new JSONObject();        try {            jsonObject.put("IPAddress", appSession.getIP_address());            jsonObject.put("NewPassword", newPassword);            jsonObject.put("OldPassword", oldPassword);            jsonObject.put("UserId", appSession.getEmployeeUserId());        } catch (Exception e) {            e.printStackTrace();        }        final String requestBody = jsonObject.toString();        Log.e("requestBody>>>>>> ","requestBody>>>>>  "+requestBody);        StringRequest getRequest = new StringRequest(Request.Method.POST, url, response -> {            pDialog.dismiss();            try {                Log.e("response","response"+response);                JSONArray jsonArray = new JSONArray(response);                JSONObject jsonObject1 = jsonArray.getJSONObject(0);                String resultMessage = jsonObject1.getString("ResultMessage");                String resultStatus = jsonObject1.getString("ResultStatus");                if (resultStatus.equalsIgnoreCase("t")) {                    showAlertDialog(resultMessage);                    //Toast.makeText(getApplicationContext(), "Success", Toast.LENGTH_SHORT).show();                } else {                    Toast.makeText(getApplicationContext(), "Some technical problem arised", Toast.LENGTH_SHORT).show();                }            } catch (Exception e) {                e.printStackTrace();            }        },                error -> {                    pDialog.dismiss();                    NetworkResponse networkResponse = error.networkResponse;                    String errorMessage = "Unknown error";                    if (networkResponse == null) {                        if (error.getClass().equals(TimeoutError.class)) {                            errorMessage = "Request timeout!\nPlease try again.";                            //callTask(1);                        } else if (error.getClass().equals(NoConnectionError.class)) {                            errorMessage = "Failed to connect server";                            pDialog.dismiss();                        }                    } else {                        String result = new String(networkResponse.data);                        try {                            if (networkResponse.statusCode == 404) {                                errorMessage = "Resource not found";                            } else if (networkResponse.statusCode == 401) {                                errorMessage = "Your session has expired!\nPlease login again";                            } else if (networkResponse.statusCode == 400) {                                errorMessage = "Invalid Input!\n Please check your inputs";                            } else if (networkResponse.statusCode == 500) {                                errorMessage = " Something is getting wrong!\nPlease try again later";                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                        pDialog.dismiss();                    }                    //showAlertDialogerror(errorMessage);//                        utilities.dialogOK("");                    error.printStackTrace();                }        ) {            @Override            public String getBodyContentType() {                return "application/json";            }            @Override            public byte[] getBody() {                try {                    return requestBody == null ? null : requestBody.getBytes("utf-8");                } catch (UnsupportedEncodingException uee) {                    VolleyLog.wtf("Unsupported Encoding while trying to get the bytes of %s using %s", requestBody, "utf-8");                    return null;                }            }            @Override            public Map<String, String> getHeaders() {                Map<String, String> params = new HashMap<String, String>();                params.put("Authorization", "bearer " + appSession.getAccessToken());                Log.e("accesstypetoken", "access_type_token" + " " + "bearer " + appSession.getAccessToken());                return params;            }        };        getRequest.setShouldCache(false);        getRequest.setRetryPolicy(new DefaultRetryPolicy(15000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        RequestQueue requestQueue = Volley.newRequestQueue(Activity_ChangePassword.this);        requestQueue.add(getRequest);    }    private void showAlertDialog(String success) {        AlertDialog.Builder builder = new AlertDialog.Builder(Activity_ChangePassword.this);        //builder.setTitle("App Update");        builder.setMessage(success);        builder.setPositiveButton("OK", (dialog, which) -> {            dialog.dismiss();            Intent i = new Intent(Activity_ChangePassword.this, LoginActivity.class);            startActivity(i);            Activity_ChangePassword.this.finish();        });        builder.create();        builder.show();    }    private String MD5(String md5) {        try {            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");            byte[] array = md.digest(md5.getBytes("UTF-8"));            StringBuilder sb = new StringBuilder();            for (byte b : array) {                sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1, 3));            }            return sb.toString();        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ignored) {        }        return null;    }    private void check_internet() {        ConnectivityManager connectivitymanager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo[] networkInfo = connectivitymanager.getAllNetworkInfo();        for (NetworkInfo netInfo : networkInfo) {            if (netInfo.getTypeName().equalsIgnoreCase("WIFI")) {                if (netInfo.isConnected()) {                    String wifiIp = myUtlis.getWifiIPAddress();                    appSession.setIP_address(wifiIp);                    Log.e("wifiIp", "check_internet: " + wifiIp);                }            } else {                if (netInfo.isConnected()) {                    String mobileIp = myUtlis.getMobileIPAddress();                    appSession.setIP_address(mobileIp);                    Log.e("mobileIp", "check_internet: " + mobileIp);                }            }        }    }}