package apps.attendancemanagementsystem.allactivities;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.app.DatePickerDialog;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.icu.text.SimpleDateFormat;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NetworkResponse;import com.android.volley.NoConnectionError;import com.android.volley.Request;import com.android.volley.TimeoutError;import com.android.volley.VolleyLog;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Objects;import apps.attendancemanagementsystem.R;import apps.attendancemanagementsystem.adapter.Adpter_eightorg;import apps.attendancemanagementsystem.model.PojoOrgEight;import apps.attendancemanagementsystem.utils.AppSession;import apps.attendancemanagementsystem.utils.Cons;import apps.attendancemanagementsystem.utils.Utilities;import apps.attendancemanagementsystem.utils.Utils;public class Activity_PreviousAttendence extends AppCompatActivity implements View.OnClickListener {    private Utilities utilities;    private AppSession appSession;    private ImageView iv_bck;    TextView tv_startDate, tv_EndDate;    String startDate = "", endDate = "";    private RecyclerView rv_attendanceList;    private Context context;    private ImageView no_record;    //for date picker for Startdate    DatePickerDialog datePickerDialog;    int year;    int month;    int dayOfMonth;    Calendar calendar;    //for date picker for end date    DatePickerDialog datePickerDialog1;    int year1;    int month1;    int dayOfMonth1;    Calendar calendar1;    public static List<PojoOrgEight> pojoOrgEights = new ArrayList<>();    private Adpter_eightorg adpter_eightorg;    SimpleDateFormat formatter1,formatter2;    Date date1,date2;    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_markattendance);        this.context = this;        this.utilities = Utilities.getInstance(this);        this.appSession = new AppSession(this);        iv_bck = findViewById(R.id.iv_bck);        no_record = findViewById(R.id.no_record);        tv_startDate = findViewById(R.id.tv_startDate);        tv_EndDate = findViewById(R.id.tv_EndDate);        rv_attendanceList = findViewById(R.id.rv_attendanceList);        LinearLayoutManager horizontalLayoutManager = new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false);        rv_attendanceList.setLayoutManager(horizontalLayoutManager);        rv_attendanceList.setAdapter(adpter_eightorg);        tv_startDate.setOnClickListener(this);        tv_EndDate.setOnClickListener(this);        iv_bck.setOnClickListener(this);    }    @SuppressLint({"NewApi", "SimpleDateFormat"})    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.iv_bck:                Intent i = new Intent(Activity_PreviousAttendence.this, Activity_MainDashboard.class);                startActivity(i);                break;            case R.id.tv_startDate:                try {                    calendar = Calendar.getInstance();                    year = calendar.get(Calendar.YEAR);                    month = calendar.get(Calendar.MONTH);                    dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);                    datePickerDialog = new DatePickerDialog(Activity_PreviousAttendence.this,                            (datePicker, year, month, day) -> {                                tv_startDate.setText(day + "/" + (month + 1) + "/" + year);                                startDate = tv_startDate.getText().toString();                                Log.e("startDate", "startDate" + startDate);//                                try {//                                    formatter1 = new SimpleDateFormat("dd/MM/yyyy");//                                    Log.e("formatter1", "formatter1" + date1);//                                    date1 = formatter1.parse(startDate);//                                    Log.e("date1", "date1" + date1);//                                } catch (ParseException e) {//                                    e.printStackTrace();//                                }                            }, year, month, dayOfMonth);                    datePickerDialog.getDatePicker().setMaxDate(System.currentTimeMillis());                    datePickerDialog.show();                } catch (Exception e) {                    e.printStackTrace();                }                break;            case R.id.tv_EndDate:                if (!startDate.equalsIgnoreCase("")) {                    calendar1 = Calendar.getInstance();                    year1 = calendar1.get(Calendar.YEAR);                    month1 = calendar1.get(Calendar.MONTH);                    dayOfMonth1 = calendar1.get(Calendar.DAY_OF_MONTH);                    datePickerDialog1 = new DatePickerDialog(Activity_PreviousAttendence.this,                            (datePicker1, year1, month1, day1) -> {                                tv_EndDate.setText(day1 + "/" + (month1 + 1) + "/" + year1);                                endDate = tv_EndDate.getText().toString();                                Log.e("tv_EndDate", "tv_EndDate" + endDate);//                                try {//                                    formatter2 = new SimpleDateFormat(endDate);//                                    date2 = formatter2.parse(endDate);//                                    Log.e("date2", "date2" + date2);//                                } catch (ParseException e) {//                                    e.printStackTrace();//                                }//                                if (date1.compareTo(date2)<0)//                                {//                                    Log.e("><<<<<<<","date2 gretaert than date1");//                                }                                if (!startDate.equalsIgnoreCase("") && !endDate.equalsIgnoreCase("")) {                                    pojoOrgEights.clear();                                    if (Utils.checkNetworkConnection(context)) {                                        getGrowthwiselist();                                    } else {                                        AlertDialog.Builder builder = new AlertDialog.Builder(Activity_PreviousAttendence.this);                                        builder.setMessage("No internet connection found");                                        builder.setPositiveButton("OK", (dialog, which) -> dialog.dismiss());                                        builder.create();                                        builder.show();                                        // Toast.makeText(getApplicationContext(), "No internet connection found", Toast.LENGTH_SHORT).show();                                    }//                                    }                                }                            }, year1, month1, dayOfMonth1);//                    datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis());                    datePickerDialog1.getDatePicker().setMaxDate(System.currentTimeMillis());                    datePickerDialog1.show();                } else {                    Toast.makeText(getApplicationContext(), "Please select Start Date first", Toast.LENGTH_LONG).show();                }                break;        }    }    private void getGrowthwiselist() {        String url = Cons.serverUrl + "api/android/App_GetAttendanceRecord";        final ProgressDialog pDialog = ProgressDialog.show(Activity_PreviousAttendence.this, null, null);        pDialog.setContentView(R.layout.progress_loader);        Objects.requireNonNull(pDialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        pDialog.setCancelable(false);        pDialog.show();        //{"FromDate":"28/09/2020","EndDate":"28/09/2020","EmployeeId":"734670"}        JSONObject jsonObject1 = new JSONObject();        try {            jsonObject1.put("FromDate", startDate);            jsonObject1.put("EndDate", endDate);            jsonObject1.put("EmployeeId", appSession.getEmployeeUserId());        } catch (JSONException e) {            e.printStackTrace();        }        final String requestBody = jsonObject1.toString();        Log.e("show_", "show_" + requestBody.toString());        StringRequest stringRequest = new StringRequest(Request.Method.POST, url, response -> {            Log.e("gorwthresponse", "gorwthresponse" + response);            try {                pDialog.dismiss();                if (response != null && !response.equalsIgnoreCase("")) {                    try {                        JSONObject jsonObject = new JSONObject(response);                        Log.e("bind_response", "onResponse: " + jsonObject);                        if (jsonObject.getString("ResultStatus").equals("t")) {                            if (jsonObject.getString("Record").equals("")) {                                rv_attendanceList.setVisibility(View.GONE);                                no_record.setVisibility(View.VISIBLE);                                //nestedScrollView.setVisibility(View.GONE);//                                myUtlis.scheduleDismiss();                            } else {                                rv_attendanceList.setVisibility(View.VISIBLE);                                no_record.setVisibility(View.GONE);                                //nestedScrollView.setVisibility(View.VISIBLE);                                JSONArray jsonArray = jsonObject.getJSONArray("Record");                                Log.e("jsonArray_length", "" + jsonArray.length());                                if (jsonArray.length() > 0) {                                    rv_attendanceList.setVisibility(View.VISIBLE);                                    no_record.setVisibility(View.GONE);                                    // nestedScrollView.setVisibility(View.VISIBLE);                                    for (int i = 0; i < jsonArray.length(); i++) {                                        pojoOrgEights.add(new PojoOrgEight(jsonArray.getJSONObject(i).getString("AttendanceDate"),                                                jsonArray.getJSONObject(i).getString("NameofOffice"),                                                jsonArray.getJSONObject(i).getString("Attin"),                                                jsonArray.getJSONObject(i).getString("AttOut")                                        ));                                    }                                    adpter_eightorg = new Adpter_eightorg(pojoOrgEights, Activity_PreviousAttendence.this);                                    rv_attendanceList.setAdapter(adpter_eightorg);//                                    myUtlis.scheduleDismiss();                                } else {                                    // nestedScrollView.setVisibility(View.GONE);                                    rv_attendanceList.setVisibility(View.GONE);                                    no_record.setVisibility(View.VISIBLE);//                                    myUtlis.scheduleDismiss();                                }                            }                        } else {                            rv_attendanceList.setVisibility(View.GONE);                            no_record.setVisibility(View.VISIBLE);//                            myUtlis.scheduleDismiss();                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                } else {                    rv_attendanceList.setVisibility(View.GONE);                    pDialog.dismiss();                }            } catch (Error | Exception e) {                e.printStackTrace();            }        },                error -> {                    pDialog.dismiss();                    NetworkResponse networkResponse = error.networkResponse;                    String errorMessage = "Unknown error";                    if (networkResponse == null) {                        if (error.getClass().equals(TimeoutError.class)) {                            errorMessage = "Request timeout";                            //callTask(1);                        } else if (error.getClass().equals(NoConnectionError.class)) {                            errorMessage = "Failed to connect server";                        }                    } else {                        String result = new String(networkResponse.data);                        try {                            if (networkResponse.statusCode == 404) {                                errorMessage = "Resource not found";                            } else if (networkResponse.statusCode == 401) {                                errorMessage = "Please do login again";                            } else if (networkResponse.statusCode == 400) {                                errorMessage = "Username or password is incorrect";                            } else if (networkResponse.statusCode == 500) {                                errorMessage = " Something is getting wrong from server ";                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                    error.printStackTrace();                    utilities.dialogOK(Activity_PreviousAttendence.this, getResources().getString(R.string.app_name), errorMessage, "OK", false);                }        ) {            @Override            public String getBodyContentType() {                return "application/json";            }            @Override            public byte[] getBody() {                try {                    return requestBody == null ? null : requestBody.getBytes("utf-8");                } catch (UnsupportedEncodingException uee) {                    VolleyLog.wtf("Unsupported Encoding while trying to get the bytes of %s using %s", requestBody, "utf-8");                    return null;                }            }            @Override            public Map<String, String> getHeaders() {                Map<String, String> params = new HashMap<String, String>();                params.put("Authorization", "bearer " + appSession.getAccessToken());                Log.e("accesstypetoken", "access_type_token" + " " + "bearer " + appSession.getAccessToken());                return params;            }        };        stringRequest.setShouldCache(false);        stringRequest.setRetryPolicy(new DefaultRetryPolicy(                15000,                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        Volley.newRequestQueue(Activity_PreviousAttendence.this).add(stringRequest);    }}