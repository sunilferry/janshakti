package apps.janshakti.allactivities;import android.Manifest;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.content.Intent;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Rect;import android.location.Location;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.os.CountDownTimer;import android.os.Looper;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.annotation.RequiresApi;import androidx.cardview.widget.CardView;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.fragment.app.DialogFragment;import androidx.fragment.app.Fragment;import com.google.android.gms.location.FusedLocationProviderClient;import com.google.android.gms.location.LocationCallback;import com.google.android.gms.location.LocationRequest;import com.google.android.gms.location.LocationResult;import com.google.android.gms.location.LocationServices;import com.google.gson.JsonObject;import com.google.zxing.integration.android.IntentIntegrator;import com.google.zxing.integration.android.IntentResult;import com.huawei.hmf.tasks.OnFailureListener;import com.huawei.hmf.tasks.OnSuccessListener;import com.huawei.hmf.tasks.Task;import com.huawei.hms.mlsdk.common.MLException;import com.huawei.hms.mlsdk.common.MLFrame;import com.huawei.hms.mlsdk.faceverify.MLFaceTemplateResult;import com.huawei.hms.mlsdk.faceverify.MLFaceVerificationAnalyzer;import com.huawei.hms.mlsdk.faceverify.MLFaceVerificationAnalyzerFactory;import com.huawei.hms.mlsdk.faceverify.MLFaceVerificationAnalyzerSetting;import com.huawei.hms.mlsdk.faceverify.MLFaceVerificationResult;import com.huawei.hms.mlsdk.livenessdetection.MLLivenessCapture;import com.huawei.hms.mlsdk.livenessdetection.MLLivenessCaptureResult;import com.microsoft.projectoxford.face.FaceServiceClient;import com.microsoft.projectoxford.face.FaceServiceRestClient;import com.microsoft.projectoxford.face.contract.Face;import org.json.JSONObject;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL;import java.util.List;import apps.janshakti.R;import apps.janshakti.activity.BaseActivity;import apps.janshakti.callbacks.PunchCallback;import apps.janshakti.callbacks.TimeOutCallback;import apps.janshakti.callbacks.VerificationCallback;import apps.janshakti.model.VerificationResponse;import apps.janshakti.model.punch_model.PunchResponse;import static apps.janshakti.allactivities.MainActivity.officeLocations;public class PunchAttendanceActivity extends BaseActivity        implements View.OnClickListener, VerificationCallback, PunchCallback, TimeOutCallback {    private static final String TAG = "Activity_Punch_Attenden";    private ImageView ivAdd;    private Button btn_submit;    TextView distance_txt, no_lat_long_tv, wrong_photo_msg_tv, distance_msg_tv, show_net_tv, locationname_txt, office_txt;    RadioGroup in_out_group;    RadioButton in_radio, out_radio;    CardView punch_card, no_lat_long_cv, cardview_user_office;    double distnearest = -1.0;    String faceid1 = "", departmentId = "";    static final int REQUEST_CAMERA_PERMISSION = 1;    static final String FRAGMENT_DIALOG = "dialog";    private final MLLivenessCapture.Callback callback = new MLLivenessCapture.Callback() {        @Override        public void onSuccess(MLLivenessCaptureResult result) {            btn_submit.setEnabled(result.isLive());            if (result.isLive()) {                wrong_photo_msg_tv.setVisibility(View.GONE);                wrong_photo_msg_tv.setText("");                bitmap = result.getBitmap();                compareBitmap = bitmap;                if (bitmap != null) {                    ByteArrayOutputStream stream = new ByteArrayOutputStream();                    bitmap.compress(Bitmap.CompressFormat.PNG, 6, stream);                    bitmap = Bitmap.createScaledBitmap(bitmap, 200, 250, true);                    ivAdd.setImageBitmap(compareBitmap);                    imageBase64 = base64(bitmap);                }            } else {                bitmap = null;                wrong_photo_msg_tv.setVisibility(View.VISIBLE);                wrong_photo_msg_tv.setText(R.string.wrong_photo);            }        }        @Override        public void onFailure(int errorCode) {        }    };    private final FaceServiceClient faceServiceClient = new FaceServiceRestClient("https://centralindia.api.cognitive.microsoft.com/face/v1.0/",            "490743c6f3ba498fac72bd000b044e8a");    JSONObject jsonObject, jsonObject1;    Bitmap bitmap = null;    String imageBase64 = "";    boolean takePicture = false;    int checkLocation = 0;    Face[] facesDetected;    double latitude = 0.0, longitude = 0.0;    boolean isInOffice;    JsonObject jsonObjectPunch;    CountDownTimer countDownTimer;    //-----    MLFaceVerificationAnalyzer analyzer;    private Bitmap templateBitmap;    private Bitmap compareBitmap;    private FusedLocationProviderClient fusedLocationClient;    private LocationCallback locationCallback;    LocationRequest locationRequest;    protected void createLocationRequest() {        locationRequest = LocationRequest.create();        locationRequest.setInterval(300000);        locationRequest.setFastestInterval(15000);        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);    }    private void startLocationUpdates2() {        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED                || ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {            if (ActivityCompat.shouldShowRequestPermissionRationale(PunchAttendanceActivity.this, Manifest.permission.ACCESS_FINE_LOCATION)) {                requestAllPermission();            } else {                showAlert(getString(R.string.permission_camera_rationale11), "permission");            }        } else {            showLoader();            fusedLocationClient.requestLocationUpdates(locationRequest,                    locationCallback,                    Looper.getMainLooper());        }    }    private void stopLocationUpdates2() {        fusedLocationClient.removeLocationUpdates(locationCallback);    }    @Override    protected void onPause() {        super.onPause();        stopLocationUpdates2();    }    @Override    protected void onStart() {        super.onStart();        startLocationUpdates2();    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_punch_attendance);        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED                && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            requestAllPermission();            return;        }        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);        createLocationRequest();        show_net_tv = findViewById(R.id.show_net_tv);        in_out_group = findViewById(R.id.in_out_group);        wrong_photo_msg_tv = findViewById(R.id.wrong_photo_msg_tv);        punch_card = findViewById(R.id.punch_card);        no_lat_long_cv = findViewById(R.id.no_lat_long_cv);        cardview_user_office = findViewById(R.id.cardview_user_office);        ivAdd = findViewById(R.id.iv_add_images);        btn_submit = findViewById(R.id.btn_submit);        distance_txt = findViewById(R.id.distance_txt);        distance_msg_tv = findViewById(R.id.distance_msg_tv);        in_radio = findViewById(R.id.in_radio);        out_radio = findViewById(R.id.out_radio);        locationname_txt = findViewById(R.id.locationname_txt);        office_txt = findViewById(R.id.office_txt);        office_txt.setText(appSession.getOrganization());        jsonObject = new JSONObject();        jsonObject1 = new JSONObject();        locationCallback = new LocationCallback() {            @Override            public void onLocationResult(LocationResult locationResult) {                hideLoader();                if (locationResult == null) {                    startLocationUpdates2();                    return;                }                for (Location location : locationResult.getLocations()) {                    Log.d(TAG, "onLocationResult: " + location);                    latitude = location.getLatitude();                    longitude = location.getLongitude();                    String address = getCompleteAddress(latitude, longitude);                    locationname_txt.setText(address);                    findNearest();                }            }        };        startLocationUpdates2();        ImageView back_iv = findViewById(R.id.back_iv);        no_lat_long_tv = findViewById(R.id.no_lat_long_tv);        ivAdd.setOnClickListener(this);        back_iv.setOnClickListener(this);        btn_submit.setOnClickListener(this);        countDownTimer = new CountDownTimer(30000, 1000) {            public void onTick(long millisUntilFinished) {                if (millisUntilFinished / 1000 == 1) {                    show_net_tv.setVisibility(View.VISIBLE);                }            }            public void onFinish() {            }        };        if(isConnected()){            initAnalyzer();            setEnableRadio();        }else {            showAlert(getString(R.string.no_internet), "");        }    }    private void setEnableRadio() {        if (MainActivity.isPunchedIn) {            in_radio.setEnabled(false);            in_radio.setChecked(false);            out_radio.setEnabled(true);        } else {            in_radio.setEnabled(true);            out_radio.setEnabled(false);            out_radio.setChecked(false);        }    }    private void initAnalyzer() {        try {            MLFaceVerificationAnalyzerSetting.Factory factory = new MLFaceVerificationAnalyzerSetting.Factory().setMaxFaceDetected(3);            MLFaceVerificationAnalyzerSetting setting = factory.create();            analyzer = MLFaceVerificationAnalyzerFactory                    .getInstance()                    .getFaceVerificationAnalyzer(setting);            loadTemplatePic();        } catch (Exception e) {            toast("" + e.getLocalizedMessage());        }    }    public static Bitmap getBitmapFromURL(String src) {        try {            URL url = new URL(src);            HttpURLConnection connection = (HttpURLConnection) url.openConnection();            connection.setDoInput(true);            connection.connect();            InputStream input = connection.getInputStream();            return BitmapFactory.decodeStream(input);        } catch (IOException e) {            e.printStackTrace();            return null;        }    }    private void loadTemplatePic() {        AsyncTask.execute(new Runnable() {            @Override            public void run() {                try {                    templateBitmap = getBitmapFromURL(appSession.getImage());                    if (templateBitmap == null) {                    } else {                        long startTime = System.currentTimeMillis();                        List<MLFaceTemplateResult> results = analyzer.setTemplateFace(MLFrame.fromBitmap(templateBitmap));                        long endTime = System.currentTimeMillis();                        StringBuilder sb = new StringBuilder();                        sb.append("##setTemplateFace|COST[");                        sb.append(endTime - startTime);                        sb.append("]");                        if (results.isEmpty()) {                            sb.append("Failure!");                        } else {                            sb.append("Success!");                        }                        Log.d(TAG, "run: " + sb.toString());                        sb.append("\n");                    }                } catch (Exception e) {                }            }        });    }    private void compare() {        final long startTime = System.currentTimeMillis();        try {            Task<List<MLFaceVerificationResult>> task = analyzer.asyncAnalyseFrame(MLFrame.fromBitmap(compareBitmap));            final StringBuilder sb = new StringBuilder();            sb.append("##getFaceSimilarity|");            task.addOnSuccessListener(new OnSuccessListener<List<MLFaceVerificationResult>>() {                @Override                public void onSuccess(List<MLFaceVerificationResult> mlCompareList) {                    long endTime = System.currentTimeMillis();                    sb.append("COST[");                    sb.append(endTime - startTime);                    sb.append("]|Success!");                    for (MLFaceVerificationResult template : mlCompareList) {                        Rect location = template.getFaceInfo().getFaceRect();                        int id = template.getTemplateId();                        float similarity = template.getSimilarity();                        Log.d(TAG, "onSuccess: " + similarity);                        if (similarity > 0.75) {                            if (isConnected()) {                                showLoader();                                JsonObject jsonObject = new JsonObject();                                jsonObject.addProperty("latitude", "" + latitude);                                jsonObject.addProperty("longitude", "" + longitude);                                jsonObject.addProperty("cIPAddress", "" + getIpAddress());                                jsonObject.addProperty("departmentid", departmentId);                                if (in_radio.isChecked()) {                                    jsonObject.addProperty("attendanceType", "In");                                } else {                                    jsonObject.addProperty("attendanceType", "Out");                                }                                jsonObject.addProperty("imagePath", imageBase64);                                webApiCalls.punchAttendance(PunchAttendanceActivity.this, PunchAttendanceActivity.this::onTimeOut, jsonObject, appSession.getAccessToken());                            } else {                                showAlert(getString(R.string.no_internet), "");                            }                        } else {                            showFailed("Face Not Match");                            clearTemp();                        }                        sb.append("|Face[");                        sb.append(location);                        sb.append("]Id[");                        sb.append(id);                        sb.append("]Similarity[");                        sb.append(similarity);                        sb.append("]");                    }                    sb.append("\n");                }            }).addOnFailureListener(new OnFailureListener() {                @Override                public void onFailure(Exception e) {                    long endTime = System.currentTimeMillis();                    sb.append("COST[");                    sb.append(endTime - startTime);                    sb.append("]|Failure!");                    if (e instanceof MLException) {                        MLException mlException = (MLException) e;                        int errorCode = mlException.getErrCode();                        String errorMessage = mlException.getMessage();                        sb.append("|ErrorCode[");                        sb.append(errorCode);                        sb.append("]Msg[");                        sb.append(errorMessage);                    } else {                        sb.append("|Error[");                        sb.append(e.getMessage());                    }                    sb.append("]");                    sb.append("\n");                    if (isConnected()) {                        showLoader();                        detectAndFrame(bitmap);                    } else {                        showAlert(getString(R.string.no_internet), "");                    }                }            });        } catch (RuntimeException e) {            Log.d(TAG, "compare: " + e.getLocalizedMessage());        }    }    private void findNearest() {        if (officeLocations.size() < 1 || !appSession.isAppointed().equals("A")) {            no_lat_long_cv.setVisibility(View.VISIBLE);            cardview_user_office.setVisibility(View.GONE);            return;        }        for (int i = 0; i < officeLocations.size(); i++) {            double temp = distance(latitude, longitude, Double.parseDouble(officeLocations.get(i).getLat()), Double.parseDouble(officeLocations.get(i).getLng()));            if (i == 0) {                departmentId = String.valueOf(officeLocations.get(i).getId());                distnearest = temp;                if (distnearest < 100.0) {                    break;                }            } else if (distnearest > temp) {                departmentId = String.valueOf(officeLocations.get(i).getId());                distnearest = temp;            }        }        double km = distnearest / 1000;        if (distnearest < 100) {            punch_card.setVisibility(View.VISIBLE);            isInOffice = true;            distance_txt.setText(String.format("%.2f", distnearest) + " m");            distance_msg_tv.setText("You are " + String.format("%.2f", distnearest) + " Meters away from Office");        } else {            punch_card.setVisibility(View.GONE);            isInOffice = false;            distance_msg_tv.setText("You are " + String.format("%.2f", km) + " KM away from Office");            distance_txt.setText(String.format("%.2f", km) + " km");        }    }    @Override    public void onClick(View view) {        if (view.getId() == R.id.iv_add_images) {            if (ContextCompat.checkSelfPermission(PunchAttendanceActivity.this, Manifest.permission.CAMERA)                    != PackageManager.PERMISSION_GRANTED) {                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                    requestCameraPermission();                }                return;            }            startDetect(PunchAttendanceActivity.this);        } else if (view.getId() == R.id.back_iv) {            finish();        } else if (view.getId() == R.id.btn_submit) {            if (!isConnected()) {                showAlert(getString(R.string.no_internet), "");            } else if (!in_radio.isChecked() && !out_radio.isChecked()) {                toast(getString(R.string.please_select_punch_type));            } else if (imageBase64.equalsIgnoreCase("")) {                toast(getString(R.string.capture_photo));            } else if (latitude == 0.0) {                toast(getString(R.string.unable_to_find_location));            } else {                try {                    countDownTimer.start();                    if (isConnected()) {                        compare();                    } else {                        showAlert(getString(R.string.no_internet), "");                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }    private void startDetect(Activity activity) {        MLLivenessCapture capture = MLLivenessCapture.getInstance();        capture.startDetect(activity, callback);    }    private void requestCameraPermission() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            if (shouldShowRequestPermissionRationale(Manifest.permission.CAMERA)) {                new ConfirmationDialog().show(getSupportFragmentManager(), FRAGMENT_DIALOG);            } else {                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION);            }        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        if (requestCode == REQUEST_CAMERA_PERMISSION) {            if (grantResults.length != 1 || grantResults[0] != PackageManager.PERMISSION_GRANTED) {                ErrorDialog.newInstance(getString(R.string.request_permission)).show(getSupportFragmentManager(), FRAGMENT_DIALOG);            } else {                startDetect(PunchAttendanceActivity.this);            }        } else {            super.onRequestPermissionsResult(requestCode, permissions, grantResults);        }    }    public static class ErrorDialog extends DialogFragment {        private static final String ARG_MESSAGE = "message";        public static ErrorDialog newInstance(String message) {            ErrorDialog dialog = new ErrorDialog();            Bundle args = new Bundle();            args.putString(ARG_MESSAGE, message);            dialog.setArguments(args);            return dialog;        }        @NonNull        @Override        public Dialog onCreateDialog(Bundle savedInstanceState) {            final Activity activity = getActivity();            return new AlertDialog.Builder(activity)                    .setMessage(getArguments().getString(ARG_MESSAGE))                    .setPositiveButton(android.R.string.ok, (dialogInterface, i) -> activity.finish())                    .create();        }    }    public static class ConfirmationDialog extends DialogFragment {        @NonNull        @Override        public Dialog onCreateDialog(Bundle savedInstanceState) {            final Fragment parent = getParentFragment();            return new AlertDialog.Builder(getActivity())                    .setMessage(R.string.request_permission)                    .setPositiveButton(android.R.string.ok, (dialog, which) -> parent.requestPermissions(new String[]{Manifest.permission.CAMERA},                            REQUEST_CAMERA_PERMISSION))                    .setNegativeButton(android.R.string.cancel,                            (dialog, which) -> {                                Activity activity = parent.getActivity();                                if (activity != null) {                                    activity.finish();                                }                            })                    .create();        }    }    private void detectAndFrame(final Bitmap imageBitmap) {        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();        imageBitmap.compress(Bitmap.CompressFormat.JPEG, 30, outputStream);        ByteArrayInputStream inputStream =                new ByteArrayInputStream(outputStream.toByteArray());        @SuppressLint("StaticFieldLeak")        AsyncTask<InputStream, String, Face[]> detectTask =                new AsyncTask<InputStream, String, Face[]>() {                    @Override                    protected Face[] doInBackground(InputStream... params) {                        try {                            Face[] result = faceServiceClient.detect(                                    params[0],                                    true,         // returnFaceId                                    false,        // returnFaceLandmarks                                    new FaceServiceClient.FaceAttributeType[]{                                            FaceServiceClient.FaceAttributeType.Emotion,                                            FaceServiceClient.FaceAttributeType.Gender}                            );                            for (int i = 0; i < result.length; i++) {                                jsonObject.put("happiness", result[i].faceAttributes.emotion.happiness);                                jsonObject.put("sadness", result[i].faceAttributes.emotion.sadness);                                jsonObject.put("surprise", result[i].faceAttributes.emotion.surprise);                                jsonObject.put("neutral", result[i].faceAttributes.emotion.neutral);                                jsonObject.put("anger", result[i].faceAttributes.emotion.anger);                                jsonObject.put("contempt", result[i].faceAttributes.emotion.contempt);                                jsonObject.put("disgust", result[i].faceAttributes.emotion.disgust);                                jsonObject.put("fear", result[i].faceAttributes.emotion.fear);                                Log.e(TAG, "doInBackground: " + jsonObject.toString());                                jsonObject1.put((String.valueOf(i)), jsonObject);                            }                            return result;                        } catch (Exception e) {                            Log.d(TAG, "doInBackground: " + e.getLocalizedMessage());                            return null;                        }                    }                    @Override                    protected void onPreExecute() {                    }                    @Override                    protected void onProgressUpdate(String... progress) {                    }                    @Override                    protected void onPostExecute(Face[] result) {                        facesDetected = result;                        if (result == null) {                            return;                        }                        if (result.length > 0) {                            faceid1 = String.valueOf(result[0].faceId);                            Log.d(TAG, "onPostExecute: " + faceid1);                            JsonObject jsonObject = new JsonObject();                            jsonObject.addProperty("faceId", faceid1);                            jsonObject.addProperty("personId", appSession.getPersonId());                            jsonObject.addProperty("personGroupId", appSession.getGroupId());                            webApiCalls.verify(PunchAttendanceActivity.this, PunchAttendanceActivity.this::onTimeOut, jsonObject);                        }                        takePicture = true;                    }                };        detectTask.execute(inputStream);    }    @Override    public void onResponse(VerificationResponse verificationResponse) {        checkLocation = 0;        try {            Log.d(TAG, "onResponse: " + verificationResponse.isIsIdentical());            if (verificationResponse.isIsIdentical()) {                jsonObjectPunch = new JsonObject();                jsonObjectPunch.addProperty("latitude", "" + latitude);                jsonObjectPunch.addProperty("longitude", "" + longitude);                jsonObjectPunch.addProperty("cIPAddress", "" + getIpAddress());                jsonObjectPunch.addProperty("departmentid", departmentId);                if (in_radio.isChecked()) {                    jsonObjectPunch.addProperty("attendanceType", "In");                } else {                    jsonObjectPunch.addProperty("attendanceType", "Out");                }                jsonObjectPunch.addProperty("imagePath", imageBase64);                webApiCalls.punchAttendance(PunchAttendanceActivity.this, PunchAttendanceActivity.this::onTimeOut, jsonObjectPunch, appSession.getAccessToken());            } else {                clearTemp();                showFailed(getString(R.string.face_not_match));            }        } catch (Exception e) {        }    }    @Override    public void onTimeOut(String from) {        if (from.equals("punch") || from.equals("verify")) {            toast(getString(R.string.timeout));            hideLoader();        } else if (from.equals("failed")) {            clearTemp();        }    }    private void clearTemp() {        bitmap = null;        imageBase64 = "";        checkLocation = 0;        faceid1 = "";        ivAdd.setImageResource(R.drawable.ic_camera);        btn_submit.setEnabled(false);        hideLoader();        countDownTimer.cancel();    }    @Override    public void onVerifyFailed() {        clearTemp();        toast(getString(R.string.something_is_wrong));    }    @Override    public void onPunchResponse(PunchResponse punchResponse) {        try {            if (punchResponse.isStatus()) {                MainActivity.isPunchedIn = !MainActivity.isPunchedIn;                setEnableRadio();                showSuccess();            } else {                toast(punchResponse.getMessage());            }            clearTemp();        } catch (Exception e) {            toast(getString(R.string.something_is_wrong));            //showFailed("Failed! Please try again");            clearTemp();        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);        if (result != null) {            if (result.getContents() == null) {                toast("Cancelled");            } else {                toast("Scanned: ");            }        } else {            super.onActivityResult(requestCode, resultCode, data);        }    }}