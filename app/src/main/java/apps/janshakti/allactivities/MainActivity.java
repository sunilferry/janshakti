package apps.janshakti.allactivities;import android.Manifest;import android.app.Dialog;import android.content.Intent;import android.content.IntentSender;import android.content.pm.PackageManager;import android.icu.text.SimpleDateFormat;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.PopupMenu;import android.widget.TextView;import androidx.annotation.Nullable;import androidx.annotation.RequiresApi;import androidx.cardview.widget.CardView;import androidx.core.app.ActivityCompat;import androidx.recyclerview.widget.RecyclerView;import com.google.android.material.floatingactionbutton.FloatingActionButton;import com.google.android.play.core.appupdate.AppUpdateInfo;import com.google.android.play.core.appupdate.AppUpdateManager;import com.google.android.play.core.appupdate.AppUpdateManagerFactory;import com.google.android.play.core.appupdate.AppUpdateOptions;import com.google.android.play.core.install.model.AppUpdateType;import com.google.android.play.core.install.model.UpdateAvailability;import com.google.android.play.core.tasks.OnSuccessListener;import com.google.android.play.core.tasks.Task;import com.google.gson.JsonObject;import java.util.Date;import java.util.LinkedList;import java.util.List;import java.util.Locale;import apps.janshakti.R;import apps.janshakti.activity.BaseActivity;import apps.janshakti.adapter.AttendanceAdapter;import apps.janshakti.callbacks.AttendanceListCallback;import apps.janshakti.callbacks.ProfileResponseCallback;import apps.janshakti.database.tables.OfficeLocation;import apps.janshakti.model.attendance_list_model.AttendanceListResponse;import apps.janshakti.model.profile_model.ProfileResponse;import apps.janshakti.model.profile_model.ResultItem;import static apps.janshakti.networking.RetrofitClient.BASE_URL;public class MainActivity extends BaseActivity implements View.OnClickListener, ProfileResponseCallback,        AttendanceListCallback {    private static final String TAG = "Activity_MainDashboard";    AppUpdateManager appUpdateManager;    FloatingActionButton floating_btn;    Dialog updateDialog;    Button update_btn;    private ImageView iv_choose;    private CardView punch_attendance_rel, view_attendance_rel, salary_card;    private TextView tv_userName;    RecyclerView recyclerView;    LinearLayout no_data_ll,scan_ll;    String today = "";    public static boolean isPunchedIn = false;    public static List<OfficeLocation> officeLocations=new LinkedList<>();    @RequiresApi(api = Build.VERSION_CODES.N)    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        try {            appUpdateManager = AppUpdateManagerFactory.create(this);            updateDialog=new Dialog(MainActivity.this);            updateDialog.setContentView(R.layout.update_dialog);            updateDialog.setCancelable(false);            updateDialog.setCanceledOnTouchOutside(false);            update_btn=updateDialog.findViewById(R.id.update_btn);            iv_choose = findViewById(R.id.iv_choose);            scan_ll = findViewById(R.id.scan_ll);            tv_userName = findViewById(R.id.tv_userName);            recyclerView = findViewById(R.id.recyclerView);            no_data_ll = findViewById(R.id.no_data_ll);            punch_attendance_rel = findViewById(R.id.punch_attendance_rel);            view_attendance_rel = findViewById(R.id.view_attendance_rel);            salary_card = findViewById(R.id.salary_card);            floating_btn = findViewById(R.id.floating_btn);            tv_userName.setText(appSession.getUsername());            iv_choose.setOnClickListener(this);            scan_ll.setOnClickListener(this);            punch_attendance_rel.setOnClickListener(this);            view_attendance_rel.setOnClickListener(this);            floating_btn.setOnClickListener(this);            salary_card.setOnClickListener(this);            update_btn.setOnClickListener(this);            SimpleDateFormat simpleDateFormatIN = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);            today = simpleDateFormatIN.format(new Date());            tv_userName.setText(appSession.getUsername());            Log.d(TAG, "onCreate: " + appSession.getUsername());            if (isConnected()) {                webApiCalls.getProfile(this::onProfileResponse, appSession.getAccessToken());                Task<AppUpdateInfo> appUpdateInfoTask = appUpdateManager.getAppUpdateInfo();                appUpdateInfoTask.addOnSuccessListener(new OnSuccessListener<AppUpdateInfo>() {                    @Override                    public void onSuccess(AppUpdateInfo appUpdateInfo) {                        if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE ) {                            Log.d(TAG, "onSuccess: Hello");                            updateDialog.show();                   /* try {                        appUpdateManager.startUpdateFlowForResult(appUpdateInfo, MainActivity.this, AppUpdateOptions.newBuilder(AppUpdateType.IMMEDIATE).setAllowAssetPackDeletion(true).build(), 121);                    } catch (IntentSender.SendIntentException e) {                        e.printStackTrace();                    }*/                        }else {                            updateDialog.dismiss();                            Log.d(TAG, "onSuccess: failed");                        }                    }                });            } else {                showAlert(getString(R.string.no_internet), "");            }            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED                    || ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {                if (ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this, Manifest.permission.ACCESS_FINE_LOCATION)) {                    showAlert(getString(R.string.permission_camera_rationale11), "permission");                } else {                    requestAllPermission();                }            }        }catch (Exception e){        }    }    @Override    protected void onRestart() {        super.onRestart();        if (isConnected()) {            webApiCalls.getProfile(MainActivity.this::onProfileResponse, appSession.getAccessToken());        } else {            showAlert(getString(R.string.no_internet), "");        }    }    @Override    public void onClick(View view) {        if (view.getId() == R.id.punch_attendance_rel) {            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED                    || ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {                if (ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this, Manifest.permission.ACCESS_FINE_LOCATION)) {                    showAlert(getString(R.string.permission_camera_rationale11), "permission");                } else {                    requestAllPermission();                }            } else {                if (isGpsEnabled()) {                   if(isConnected()){                       if(appSession.getImage().isEmpty()){                           showAlert(getString(R.string.your_photo_is_not_updated), "");                       }else {                           gotoActivity(PunchAttendanceActivity.class);                       }                   }else {                       showAlert(getString(R.string.no_internet),"");                   }                } else {                    buildAlertMessageNoGps();                }            }        }  else if (view.getId() == R.id.scan_ll) {            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED                    || ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {                if (ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this, Manifest.permission.ACCESS_FINE_LOCATION)) {                    showAlert(getString(R.string.permission_camera_rationale11), "permission");                } else {                    requestAllPermission();                }            } else {                if (isGpsEnabled()) {                    if(isConnected()){                        if(appSession.getImage().isEmpty()){                            showAlert(getString(R.string.your_photo_is_not_updated), "");                        }else {                            gotoActivity(QrScannerActivity.class);                        }                    }else {                        showAlert(getString(R.string.no_internet),"");                    }                } else {                    buildAlertMessageNoGps();                }            }        } else if (view.getId() == R.id.view_attendance_rel) {            if(isConnected()){                gotoActivity(AttendanceListActivity.class);            }        }else if (view.getId() == R.id.update_btn) {            startActivity(new Intent(Intent.ACTION_VIEW,                    Uri.parse("http://play.google.com/store/apps/details?id=" + getApplicationContext().getPackageName())));        } else if (view.getId() == R.id.salary_card) {            if(isConnected()){                gotoActivity(SalaryListActivity.class);            }        } else if (view.getId() == R.id.iv_choose) {            PopupMenu popup = new PopupMenu(this, iv_choose);            popup.getMenuInflater().inflate(R.menu.dash_menu, popup.getMenu());            popup.setOnMenuItemClickListener(item -> {                switch (item.getItemId()) {                    case R.id.privacy_policy:                        Uri uri = Uri.parse(BASE_URL + "Privacy_Policy.html"); // missing 'http://' will cause crashed                        Intent intent = new Intent(Intent.ACTION_VIEW, uri);                        startActivity(intent);                        return true;                    case R.id.logout:                        showLogoutAlert();                        return true;                    case R.id.device_info:                        if(isConnected()){                            gotoActivity(DeviceInfoActivity.class);                        }                        return true;                    case R.id.profile:                        if(isConnected()){                            gotoActivity(ProfileActivity.class);                        }else {                            showAlert(getString(R.string.no_internet),"");                        }                        return true;                    default:                        return true;                }            });            popup.show(); //showing popup menu        }    }    @Override    public void onProfileResponse(ProfileResponse profileResponse) {        try {            if (profileResponse.isStatus()) {                officeLocations.clear();                appSession.setUsername(profileResponse.getData().getObj().getName());                appSession.setMobile(profileResponse.getData().getObj().getMobile());                appSession.setEmailAddress(profileResponse.getData().getObj().getEmail());                appSession.setImage(profileResponse.getData().getObj().getPhotoUrl());                appSession.setPersonId(profileResponse.getData().getObj().getApiPersonId());                appSession.setGroupId(profileResponse.getData().getObj().getApiGroupId());                appSession.setOrganization(profileResponse.getData().getObj().getOrganizationName());                appSession.setAppoint(profileResponse.getData().getObj().getIsAppoints());  // isAppoint=A means appointed else not Appointed                tv_userName.setText(appSession.getUsername());                for (int i = 0; i < profileResponse.getData().getLatLongList().getResult().size(); i++) {                    ResultItem item = profileResponse.getData().getLatLongList().getResult().get(i);                    OfficeLocation location = new OfficeLocation(Integer.parseInt(item.getLatLongId()), item.getLatitude(), item.getLongitude());                    officeLocations.add(location);                }                new Handler().postDelayed(new Runnable() {                    @Override                    public void run() {                        getAttendance();                    }                }, 100);            } else {            }        } catch (Exception e) {        }    }    private void getAttendance() {        try {            JsonObject jsonObject = new JsonObject();            jsonObject.addProperty("fromDate", today);            jsonObject.addProperty("toDate", today);            Log.d(TAG, "getData: " + jsonObject + " " + appSession.getAccessToken());            webApiCalls.getAttendanceList(this, jsonObject, appSession.getAccessToken());        }catch (Exception e){        }    }    @Override    public void onAttendanceListResponse(AttendanceListResponse attendanceListResponse) {        try {            if (attendanceListResponse.isStatus()) {                if (attendanceListResponse.getData().size() > 0) {                    AttendanceAdapter attendanceAdapter = new AttendanceAdapter(attendanceListResponse.getData());                    recyclerView.setAdapter(attendanceAdapter);                    recyclerView.setVisibility(View.VISIBLE);                    no_data_ll.setVisibility(View.GONE);                    Log.d(TAG, "onAttendanceListResponse: " + attendanceListResponse.getData().get(attendanceListResponse.getData().size() - 1).getAttendanceType());                    isPunchedIn = attendanceListResponse.getData().get(0).getAttendanceType().contains("In");                } else {                    isPunchedIn = false;                    no_data_ll.setVisibility(View.VISIBLE);                    recyclerView.setVisibility(View.GONE);                }            } else {                isPunchedIn = false;                no_data_ll.setVisibility(View.VISIBLE);                recyclerView.setVisibility(View.GONE);            }        } catch (Exception e) {            isPunchedIn = false;            no_data_ll.setVisibility(View.VISIBLE);            recyclerView.setVisibility(View.GONE);        }    }    @Override    public void onAttendanceListFailed() {        isPunchedIn = false;        no_data_ll.setVisibility(View.VISIBLE);        recyclerView.setVisibility(View.GONE);        tv_userName.setText(appSession.getUsername());    }}