package apps.janshakti.allactivities;import android.app.DatePickerDialog;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.TextView;import androidx.annotation.Nullable;import androidx.recyclerview.widget.RecyclerView;import com.google.gson.JsonObject;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.Locale;import apps.janshakti.R;import apps.janshakti.activity.BaseActivity;import apps.janshakti.adapter.AttendanceAdapter;import apps.janshakti.callbacks.AttendanceListCallback;import apps.janshakti.model.attendance_list_model.AttendanceListResponse;public class AttendanceListActivity extends BaseActivity implements View.OnClickListener, AttendanceListCallback {    private static final String TAG = "Activity_PreviousAttend";    TextView tv_startDate, tv_EndDate, name_tv;    String startDate = "", endDate = "";    private RecyclerView rv_attendanceList;    private ImageView no_record, iv_bck;    DatePickerDialog datePickerDialog;    int year;    int month;    int dayOfMonth;    Calendar calendar;    DatePickerDialog datePickerDialog1;    private AttendanceAdapter attendanceAdapter;    JsonObject jsonObject = new JsonObject();    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_attendance_list);        iv_bck = findViewById(R.id.iv_bck);        no_record = findViewById(R.id.no_record);        tv_startDate = findViewById(R.id.tv_startDate);        tv_EndDate = findViewById(R.id.tv_EndDate);        rv_attendanceList = findViewById(R.id.rv_attendanceList);        name_tv = findViewById(R.id.name_tv);        name_tv.setText("Hey " + appSession.getUsername() + ",");        calendar = Calendar.getInstance();        Date c = calendar.getTime();        year = calendar.get(Calendar.YEAR);        month = calendar.get(Calendar.MONTH);        dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);        startDate = simpleDateFormat.format(c);        endDate = startDate;        tv_startDate.setOnClickListener(this);        tv_EndDate.setOnClickListener(this);        iv_bck.setOnClickListener(this);        getData();    }    private void getData() {        jsonObject.addProperty("fromDate", startDate);        jsonObject.addProperty("toDate", endDate);        Log.d(TAG, "getData: " + jsonObject + " " + appSession.getAccessToken());        showLoader();        webApiCalls.getAttendanceList(this, jsonObject, appSession.getAccessToken());    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.iv_bck:                finish();                break;            case R.id.tv_startDate:                try {                    datePickerDialog = new DatePickerDialog(AttendanceListActivity.this,                            (datePicker, year, month, day) -> {                                startDate = day + "/" + (month + 1) + "/" + year;                                tv_startDate.setText(startDate);                            }, year, month, dayOfMonth);                    datePickerDialog.getDatePicker().setMaxDate(System.currentTimeMillis());                    datePickerDialog.show();                } catch (Exception e) {                    e.printStackTrace();                }                break;            case R.id.tv_EndDate:                if (!startDate.equalsIgnoreCase("")) {                    datePickerDialog1 = new DatePickerDialog(AttendanceListActivity.this,                            (datePicker1, year, month, day) -> {                                endDate = day + "/" + (month + 1) + "/" + year;                                tv_EndDate.setText(endDate);                                if (!startDate.equalsIgnoreCase("") && !endDate.equalsIgnoreCase("")) {                                    if (isConnected()) {                                        getData();                                    } else {                                        showAlert(getString(R.string.no_internet), "");                                    }                                }                            }, year, month, dayOfMonth);                    datePickerDialog1.getDatePicker().setMaxDate(System.currentTimeMillis());                    datePickerDialog1.show();                } else {                    toast("Please select Start Date first");                }                break;        }    }    @Override    public void onAttendanceListResponse(AttendanceListResponse attendanceListResponse) {        try {            hideLoader();            if (attendanceListResponse.isStatus()) {                if (attendanceListResponse.getData().size() > 0) {                    attendanceAdapter = new AttendanceAdapter(attendanceListResponse.getData());                    rv_attendanceList.setAdapter(attendanceAdapter);                    rv_attendanceList.setVisibility(View.VISIBLE);                    no_record.setVisibility(View.GONE);                } else {                    no_record.setVisibility(View.VISIBLE);                    rv_attendanceList.setVisibility(View.GONE);                }            } else {                no_record.setVisibility(View.VISIBLE);                rv_attendanceList.setVisibility(View.GONE);            }        } catch (Exception e) {            Log.d(TAG, "onAttendanceListResponse: " + e.getLocalizedMessage());        }    }    @Override    public void onAttendanceListFailed() {        Log.d(TAG, "onAttendanceListFailed: ");        hideLoader();        no_record.setVisibility(View.VISIBLE);        rv_attendanceList.setVisibility(View.GONE);    }}